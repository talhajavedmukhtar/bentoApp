{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./App.css';import{initializeApp}from\"firebase/app\";import{getAnalytics}from\"firebase/analytics\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const _=require('lodash');const firebaseConfig={apiKey:\"AIzaSyDs7OhdjYAaLsZeDBEXyxi3hGxfIVEmnac\",authDomain:\"bento-app-b64c5.firebaseapp.com\",projectId:\"bento-app-b64c5\",storageBucket:\"bento-app-b64c5.appspot.com\",messagingSenderId:\"738546689884\",appId:\"1:738546689884:web:1dbe62feaa2770b7d48399\",measurementId:\"G-4N1P5BG8ZF\"};// Initialize Firebase\nconst app=initializeApp(firebaseConfig);const analytics=getAnalytics(app);const[width,setWidth]=useState(8);const[height,setHeight]=useState(4);const[numBoxes,setNumBoxes]=useState(8);const[minSize,setMinSize]=useState(1);const[maxSize,setMaxSize]=useState(1);const[sequence,setSequence]=useState([]);const[field,setField]=useState([]);const createField=(width,height)=>{const newField=Array.from({length:height},()=>Array.from({length:width},()=>'**'));return newField;};// Function to convert a string to a color\nconst stringToColor=async string=>{const hashBuffer=await crypto.subtle.digest('SHA-256',new TextEncoder().encode(string));const hashArray=Array.from(new Uint8Array(hashBuffer));const hashHex=hashArray.map(b=>b.toString(16).padStart(2,'0')).join('');// Generate warm colors by focusing on the warm spectrum\nconst r=parseInt(hashHex.substring(0,6),16)%256;// Red component\nconst g=parseInt(hashHex.substring(6,12),16)%200;// Green component\nconst b=parseInt(hashHex.substring(12,18),16)%100;// Blue component\nreturn\"rgb(\".concat(r,\", \").concat(g,\", \").concat(b,\")\");};// Function to visualize the field\nconst visualizeField=async(field,w,h)=>{const size=10/(w>h?w:2*h);const boxSize=\"\".concat(size,\"em\");const visualizedField=[];for(let i=0;i<field.length;i++){const row=[];for(let j=0;j<field[0].length;j++){const color=field[i][j]==='**'?'white':await stringToColor(field[i][j]);row.push(/*#__PURE__*/_jsx(\"div\",{style:{width:boxSize,height:boxSize,backgroundColor:color,padding:boxSize,marginRight:'0em',border:'1px solid black',display:'inline-block'}},\"\".concat(i,\"-\").concat(j)));}visualizedField.push(/*#__PURE__*/_jsx(\"div\",{style:{lineHeight:'0em'},children:row},i));}return visualizedField;};// Create initial field when component mounts\nuseEffect(()=>{const initialField=createField(width,height);visualizeField(initialField,width,height).then(visualized=>setField(visualized));},[]);const handleWidthChange=e=>{setWidth(parseInt(e.target.value));};const handleHeightChange=e=>{setHeight(parseInt(e.target.value));};const handleNumBoxesChange=e=>{setNumBoxes(parseInt(e.target.value));};const handleMinSizeChange=e=>{setMinSize(parseInt(e.target.value));};const handleMaxSizeChange=e=>{setMaxSize(parseInt(e.target.value));};function getBoxOptions(minSize,maxSize,width,height){const options=new Set();for(let i=minSize;i<=maxSize;i++){for(let j=minSize;j<=maxSize;j++){if(j<=height&&i<=width){options.add([i,j,i*j].toString());options.add([j,i,i*j].toString());}}}return Array.from(options).sort((a,b)=>b[2]-a[2]);}function findSequenceOfLengthBest(number,nums,length){shuffle(nums);const dp=Array.from({length:length+1},()=>Array(number+1).fill(null));try{dp[0][0]=[];}catch(e){return[];}for(let i=1;i<=length;i++){for(let j=0;j<=number;j++){for(const num of nums){if(j-num>=0&&dp[i-1][j-num]!==null){if(dp[i][j]===null||dp[i][j].length<i){dp[i][j]=dp[i-1][j-num].concat([num]);}}}}}return dp[length][number]!==null?dp[length][number]:[];}// Helper function to shuffle an array\nfunction shuffle(array){let currentIndex=array.length,randomIndex;while(currentIndex!==0){randomIndex=Math.floor(Math.random()*currentIndex);currentIndex--;[array[currentIndex],array[randomIndex]]=[array[randomIndex],array[currentIndex]];}}function bentoIsFilledAppropriately(field,numBoxesSoFar,numBoxes){for(let row of field){for(let element of row){if(element===\"**\"){return false;}}}console.log(\"Bento filled? \",numBoxesSoFar===numBoxes,numBoxesSoFar,numBoxes);return numBoxesSoFar===numBoxes;}function storeForbiddenPath(forbiddenPathsDict,path,position,boxOption){if(forbiddenPathsDict[path]){if(!forbiddenPathsDict[path].includes(\"\".concat(boxOption,\",\").concat(position))){forbiddenPathsDict[path].push(\"\".concat(boxOption,\",\").concat(position));}}else{forbiddenPathsDict[path]=[\"\".concat(boxOption,\",\").concat(position)];}}function retrieveForbiddenPaths(forbiddenPathsDict,basePath){return forbiddenPathsDict[basePath]||[];}function getBoxOptionsFromSize(minSize,maxSize,size,width,height){const boxOptions=getBoxOptions(minSize,maxSize,width,height);console.log(\"Box ops: \",boxOptions,\" size: \",size);return boxOptions.filter(x=>x.split(\",\")[2]===size);}function findCandidateIndices(field,boxOptionString){const boxOption=boxOptionString.split(\",\");const boxWidth=parseInt(boxOption[0]);const boxHeight=parseInt(boxOption[1]);const indices=[];const rows=field.length;const cols=rows>0?field[0].length:0;for(let i=0;i<rows-boxHeight+1;i++){for(let j=0;j<cols-boxWidth+1;j++){console.log(\"Heaven: \",i,j);const subArr=field.slice(i,i+boxHeight).map(row=>row.slice(j,j+boxWidth));const isAllEmpty=subArr.every(row=>row.every(elem=>elem===\"**\"));if(isAllEmpty){indices.push([i,j]);}}}return indices;}function augmentWithBox(field,index,boxOptionString,newChar){console.log(\"Augmentation time!!! \",index);const fieldCopy=field.map(row=>[...row]);// Deep copy of the field\nconst boxOption=boxOptionString.split(\",\");const boxWidth=parseInt(boxOption[0]);const boxHeight=parseInt(boxOption[1]);const[x,y]=index;for(let i=x;i<x+boxHeight;i++){for(let j=y;j<y+boxWidth;j++){console.log(\"Augmentation time!!!XXX\");fieldCopy[i][j]=\"*\".concat(newChar);}}return fieldCopy;}// Handle generating a new field\nconst handleGenerateField=()=>{let field=createField(width,height);const boxOptions=getBoxOptions(minSize,maxSize,width,height);const boxSizes=boxOptions.map(x=>x[2]);let theSequence=findSequenceOfLengthBest(width*height,boxSizes,numBoxes);theSequence.sort((a,b)=>b-a);setSequence(theSequence.toString());let prevPrevState=_.cloneDeep(field);let prevState=_.cloneDeep(field);let prevPrevNumBoxes=0;let prevNumBoxes=0;const forbiddenPathsDict={};let runNumber=0;let numBoxesSoFar=0;let currentPath=[];while(!bentoIsFilledAppropriately(field,numBoxesSoFar)){const relevantBoxSize=theSequence[numBoxesSoFar];const relevantBoxOptions=getBoxOptionsFromSize(minSize,maxSize,relevantBoxSize,width,height);let newBoxCanBeAdded=false;let newBoxOption=null;let newBoxIndex=null;console.log(\"relevantBoxSize: \",relevantBoxSize);console.log(\"relevantBoxOptions: \",relevantBoxOptions);for(const boxOption of relevantBoxOptions){const candidateIndices=findCandidateIndices(field,boxOption);console.log(\"candidateIndices: \",candidateIndices);const validCandidateIndices=[];for(const candidateIndex of candidateIndices){const pathStr=\"\".concat(candidateIndex,\",\").concat(boxOption);if(!retrieveForbiddenPaths(forbiddenPathsDict,String(currentPath)).includes(pathStr)){console.log(\"ValidCandidate: \",candidateIndex,boxOption);validCandidateIndices.push(candidateIndex);}}if(validCandidateIndices.length>0){newBoxCanBeAdded=true;newBoxOption=boxOption;if(validCandidateIndices.some(index=>index[0]===0&&index[1]===0)){newBoxIndex=[0,0];}else{newBoxIndex=validCandidateIndices[Math.floor(Math.random()*validCandidateIndices.length)];}break;}}if(newBoxCanBeAdded){prevPrevNumBoxes=prevNumBoxes;prevPrevState=_.cloneDeep(prevState);prevNumBoxes=numBoxesSoFar;prevState=_.cloneDeep(field);const augmentedField=augmentWithBox(field,newBoxIndex,newBoxOption,numBoxesSoFar);field=_.cloneDeep(augmentedField);numBoxesSoFar++;currentPath.push([newBoxOption,newBoxIndex]);}else{if(currentPath.length===0){field=createField(width,height);prevPrevNumBoxes=0;prevPrevState=_.cloneDeep(field);prevNumBoxes=0;prevState=_.cloneDeep(field);numBoxesSoFar=0;}else{const[lastBoxPosition,lastBoxOption]=currentPath.pop();storeForbiddenPath(forbiddenPathsDict,String(currentPath),lastBoxPosition,lastBoxOption);if(currentPath.length===0){field=createField(width,height);prevPrevNumBoxes=0;prevPrevState=_.cloneDeep(field);prevNumBoxes=0;prevState=_.cloneDeep(field);numBoxesSoFar=0;}else{numBoxesSoFar=prevNumBoxes;field=_.cloneDeep(prevState);prevNumBoxes=prevPrevNumBoxes;prevState=_.cloneDeep(prevPrevState);}}}runNumber++;if(runNumber%1===0){console.log(runNumber,numBoxesSoFar);}if(runNumber%6===0){break;}if(prevNumBoxes===prevPrevNumBoxes&&prevNumBoxes===numBoxesSoFar){theSequence=findSequenceOfLengthBest(width*height,boxOptions.map(x=>x[2]),numBoxes);theSequence.sort((a,b)=>b-a);field=createField(width,height);prevPrevNumBoxes=0;prevPrevState=_.cloneDeep(field);prevNumBoxes=0;prevState=_.cloneDeep(field);numBoxesSoFar=0;currentPath=[];}}visualizeField(field,width,height).then(visualized=>setField(visualized));};return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"heading\",children:/*#__PURE__*/_jsx(\"h3\",{children:\" \\u5F01\\u5F53\\u5C4B \\uD83C\\uDF71 \"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"inputs\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"width\",children:\"Width:\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",id:\"width\",placeholder:width,value:width,onChange:handleWidthChange,min:\"2\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"height\",children:\"Height:\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",id:\"height\",placeholder:height,value:height,onChange:handleHeightChange,min:\"2\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"input3\",children:\"Num Boxes:\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",id:\"input3\",placeholder:numBoxes,value:numBoxes,onChange:handleNumBoxesChange,min:\"1\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"input4\",children:\"Min Size:\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",id:\"input4\",placeholder:minSize,value:minSize,onChange:handleMinSizeChange,min:\"1\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"input5\",children:\"Max Size:\"}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",id:\"input5\",placeholder:maxSize,value:maxSize,onChange:handleMaxSizeChange,min:\"1\"})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleGenerateField,children:\" Generate \"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bentoArea\",children:[sequence,field]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","initializeApp","getAnalytics","jsx","_jsx","jsxs","_jsxs","App","_","require","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","width","setWidth","height","setHeight","numBoxes","setNumBoxes","minSize","setMinSize","maxSize","setMaxSize","sequence","setSequence","field","setField","createField","newField","Array","from","length","stringToColor","string","hashBuffer","crypto","subtle","digest","TextEncoder","encode","hashArray","Uint8Array","hashHex","map","b","toString","padStart","join","r","parseInt","substring","g","concat","visualizeField","w","h","size","boxSize","visualizedField","i","row","j","color","push","style","backgroundColor","padding","marginRight","border","display","lineHeight","children","initialField","then","visualized","handleWidthChange","e","target","value","handleHeightChange","handleNumBoxesChange","handleMinSizeChange","handleMaxSizeChange","getBoxOptions","options","Set","add","sort","a","findSequenceOfLengthBest","number","nums","shuffle","dp","fill","num","array","currentIndex","randomIndex","Math","floor","random","bentoIsFilledAppropriately","numBoxesSoFar","element","console","log","storeForbiddenPath","forbiddenPathsDict","path","position","boxOption","includes","retrieveForbiddenPaths","basePath","getBoxOptionsFromSize","boxOptions","filter","x","split","findCandidateIndices","boxOptionString","boxWidth","boxHeight","indices","rows","cols","subArr","slice","isAllEmpty","every","elem","augmentWithBox","index","newChar","fieldCopy","y","handleGenerateField","boxSizes","theSequence","prevPrevState","cloneDeep","prevState","prevPrevNumBoxes","prevNumBoxes","runNumber","currentPath","relevantBoxSize","relevantBoxOptions","newBoxCanBeAdded","newBoxOption","newBoxIndex","candidateIndices","validCandidateIndices","candidateIndex","pathStr","String","some","augmentedField","lastBoxPosition","lastBoxOption","pop","className","htmlFor","type","id","placeholder","onChange","min","onClick"],"sources":["/Users/Talha/repos/steed/bento/bento-app/src/App.jsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css'; \nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\n\nfunction App() {\n  const _ = require('lodash');\n\n  const firebaseConfig = {\n  apiKey: \"AIzaSyDs7OhdjYAaLsZeDBEXyxi3hGxfIVEmnac\",\n  authDomain: \"bento-app-b64c5.firebaseapp.com\",\n  projectId: \"bento-app-b64c5\",\n  storageBucket: \"bento-app-b64c5.appspot.com\",\n  messagingSenderId: \"738546689884\",\n  appId: \"1:738546689884:web:1dbe62feaa2770b7d48399\",\n  measurementId: \"G-4N1P5BG8ZF\"\n  };\n\n  // Initialize Firebase\n  const app = initializeApp(firebaseConfig);\n  const analytics = getAnalytics(app);\n\n  const [width, setWidth] = useState(8)\n  const [height, setHeight] = useState(4)\n  const [numBoxes, setNumBoxes] = useState(8)\n  const [minSize, setMinSize] = useState(1)\n  const [maxSize, setMaxSize] = useState(1)\n\n  const [sequence, setSequence] = useState([])\n  const [field, setField] = useState([]);\n\n  const createField = (width, height) => {\n    const newField = Array.from({ length: height }, () =>\n      Array.from({ length: width }, () => '**')\n    );\n    return newField;\n  };\n\n  // Function to convert a string to a color\n  const stringToColor = async (string) => {\n    const hashBuffer = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(string));\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray.map((b) => b.toString(16).padStart(2, '0')).join('');\n\n    // Generate warm colors by focusing on the warm spectrum\n    const r = parseInt(hashHex.substring(0, 6), 16) % 256; // Red component\n    const g = parseInt(hashHex.substring(6, 12), 16) % 200; // Green component\n    const b = parseInt(hashHex.substring(12, 18), 16) % 100; // Blue component\n\n    return `rgb(${r}, ${g}, ${b})`;\n  };\n\n  // Function to visualize the field\n  const visualizeField = async (field,w,h) => {\n    const size = 10 / (w > h ? w : 2*h);\n\n    const boxSize = `${size}em`\n\n    const visualizedField = [];\n    for (let i = 0; i < field.length; i++) {\n      const row = [];\n      for (let j = 0; j < field[0].length; j++) {\n        const color = field[i][j] === '**' ? 'white' : await stringToColor(field[i][j]);\n        row.push(\n          <div\n            key={`${i}-${j}`}\n            style={{\n              width: boxSize,\n              height: boxSize,\n              backgroundColor: color,\n              padding: boxSize,\n              marginRight: '0em',\n              border: '1px solid black',\n              display: 'inline-block',\n            }}\n          />\n        );\n      }\n      visualizedField.push(<div key={i} style={{lineHeight: '0em'}}>{row}</div>);\n    }\n    return visualizedField;\n  };\n\n  // Create initial field when component mounts\n  useEffect(() => {\n    const initialField = createField(width, height);\n    visualizeField(initialField, width, height).then((visualized) => setField(visualized));\n  }, []);\n\n  const handleWidthChange = (e) => {\n    setWidth(parseInt(e.target.value));\n  };\n\n  const handleHeightChange = (e) => {\n    setHeight(parseInt(e.target.value));\n  };\n\n  const handleNumBoxesChange = (e) => {\n    setNumBoxes(parseInt(e.target.value));\n  };\n\n  const handleMinSizeChange = (e) => {\n    setMinSize(parseInt(e.target.value));\n  };\n\n  const handleMaxSizeChange = (e) => {\n    setMaxSize(parseInt(e.target.value));\n  };\n\n  function getBoxOptions(minSize, maxSize, width, height) {\n    const options = new Set();\n    for (let i = minSize; i <= maxSize; i++) {\n      for (let j = minSize; j <= maxSize; j++) {\n        if (j <= height && i <= width) {\n          options.add([i, j, i * j].toString());\n          options.add([j, i, i * j].toString());\n        }\n      }\n    }\n\n    return Array.from(options).sort((a, b) => b[2] - a[2]);\n  }\n\n  function findSequenceOfLengthBest(number, nums, length) {\n    shuffle(nums);\n\n    const dp = Array.from({ length: length + 1 }, () => Array(number + 1).fill(null));\n\n    try {\n      dp[0][0] = [];\n    } catch (e) {\n      return [];\n    }\n\n    for (let i = 1; i <= length; i++) {\n      for (let j = 0; j <= number; j++) {\n        for (const num of nums) {\n          if (j - num >= 0 && dp[i - 1][j - num] !== null) {\n            if (dp[i][j] === null || dp[i][j].length < i) {\n              dp[i][j] = dp[i - 1][j - num].concat([num]);\n            }\n          }\n        }\n      }\n    }\n\n    return dp[length][number] !== null ? dp[length][number] : [];\n  }\n\n  // Helper function to shuffle an array\n  function shuffle(array) {\n    let currentIndex = array.length, randomIndex;\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n  }\n\n  function bentoIsFilledAppropriately(field, numBoxesSoFar, numBoxes) {\n    for (let row of field) {\n        for (let element of row) {\n            if (element === \"**\") {\n                return false;\n            }\n        }\n    }\n\n    console.log(\"Bento filled? \",numBoxesSoFar === numBoxes,numBoxesSoFar,numBoxes);\n\n    return numBoxesSoFar === numBoxes;\n  }\n\n  function storeForbiddenPath(forbiddenPathsDict, path, position, boxOption) {\n    if (forbiddenPathsDict[path]) {\n        if (!forbiddenPathsDict[path].includes(`${boxOption},${position}`)) {\n            forbiddenPathsDict[path].push(`${boxOption},${position}`);\n        }\n    } else {\n        forbiddenPathsDict[path] = [`${boxOption},${position}`];\n    }\n  }\n\n  function retrieveForbiddenPaths(forbiddenPathsDict, basePath) {\n      return forbiddenPathsDict[basePath] || [];\n  }\n\n  function getBoxOptionsFromSize(minSize, maxSize, size, width, height) {\n    const boxOptions = getBoxOptions(minSize, maxSize, width, height);\n    console.log(\"Box ops: \",boxOptions, \" size: \",size)\n    return boxOptions.filter(x => x.split(\",\")[2] === size);\n  }\n\n  function findCandidateIndices(field, boxOptionString) {\n    const boxOption = boxOptionString.split(\",\");\n    const boxWidth = parseInt(boxOption[0]);\n    const boxHeight = parseInt(boxOption[1]);\n\n    const indices = [];\n\n    const rows = field.length;\n    const cols = rows > 0 ? field[0].length : 0;\n\n    for (let i = 0; i < rows - boxHeight + 1; i++) {\n        for (let j = 0; j < cols - boxWidth + 1; j++) {\n            console.log(\"Heaven: \",i,j)\n            const subArr = field.slice(i, i + boxHeight).map(row => row.slice(j, j + boxWidth));\n            const isAllEmpty = subArr.every(row => row.every(elem => elem === \"**\"));\n            if (isAllEmpty) {\n                indices.push([i, j]);\n            }\n        }\n    }\n\n    return indices;\n  }\n\n  function augmentWithBox(field, index, boxOptionString, newChar) {\n    console.log(\"Augmentation time!!! \", index)\n    const fieldCopy = field.map(row => [...row]); // Deep copy of the field\n\n    const boxOption = boxOptionString.split(\",\")\n    const boxWidth = parseInt(boxOption[0]);\n    const boxHeight = parseInt(boxOption[1]);\n\n    const [x, y] = index;\n    for (let i = x; i < x + boxHeight; i++) {\n        for (let j = y; j < y + boxWidth; j++) {\n            console.log(\"Augmentation time!!!XXX\")\n            fieldCopy[i][j] = `*${newChar}`;\n        }\n    }\n\n    return fieldCopy;\n  }\n\n\n  // Handle generating a new field\n  const handleGenerateField = () => {\n    let field = createField(width, height);\n\n    const boxOptions = getBoxOptions(minSize, maxSize, width, height);\n\n    const boxSizes = boxOptions.map((x) => x[2]);\n\n    let theSequence = findSequenceOfLengthBest(width * height, boxSizes, numBoxes);\n    theSequence.sort((a, b) => b - a);\n\n    setSequence(theSequence.toString());\n\n    let prevPrevState = _.cloneDeep(field);\n    let prevState = _.cloneDeep(field);\n\n    let prevPrevNumBoxes = 0;\n    let prevNumBoxes = 0;\n    const forbiddenPathsDict = {};\n    let runNumber = 0;\n\n    let numBoxesSoFar = 0\n    let currentPath = []\n\n    while (!bentoIsFilledAppropriately(field, numBoxesSoFar)) {\n      const relevantBoxSize = theSequence[numBoxesSoFar];\n      const relevantBoxOptions = getBoxOptionsFromSize(minSize, maxSize, relevantBoxSize, width, height);\n\n      let newBoxCanBeAdded = false;\n      let newBoxOption = null;\n      let newBoxIndex = null;\n\n      console.log(\"relevantBoxSize: \",relevantBoxSize);\n      console.log(\"relevantBoxOptions: \",relevantBoxOptions);\n\n      for (const boxOption of relevantBoxOptions) {\n          const candidateIndices = findCandidateIndices(field, boxOption);\n          console.log(\"candidateIndices: \",candidateIndices);\n          const validCandidateIndices = [];\n\n          for (const candidateIndex of candidateIndices) {\n              const pathStr = `${candidateIndex},${boxOption}`;\n              if (!retrieveForbiddenPaths(forbiddenPathsDict, String(currentPath)).includes(pathStr)) {\n                  console.log(\"ValidCandidate: \",candidateIndex,boxOption)\n                  validCandidateIndices.push(candidateIndex);\n              }\n          }\n\n          if (validCandidateIndices.length > 0) {\n              newBoxCanBeAdded = true;\n              newBoxOption = boxOption;\n              if (validCandidateIndices.some(index => index[0] === 0 && index[1] === 0)) {\n                newBoxIndex = [0, 0];\n              } else {\n                newBoxIndex = validCandidateIndices[Math.floor(Math.random() * validCandidateIndices.length)];\n              }\n              break;\n          }\n      }\n\n      if (newBoxCanBeAdded) {\n          prevPrevNumBoxes = prevNumBoxes;\n          prevPrevState = _.cloneDeep(prevState);\n          prevNumBoxes = numBoxesSoFar;\n          prevState = _.cloneDeep(field);\n          const augmentedField = augmentWithBox(field, newBoxIndex, newBoxOption, numBoxesSoFar);\n          field = _.cloneDeep(augmentedField);\n          numBoxesSoFar++;\n\n          currentPath.push([newBoxOption, newBoxIndex]);\n      } else {\n          if (currentPath.length === 0) {\n              field = createField(width, height);\n\n              prevPrevNumBoxes = 0;\n              prevPrevState = _.cloneDeep(field);\n\n              prevNumBoxes = 0;\n              prevState = _.cloneDeep(field);\n\n              numBoxesSoFar = 0;\n          } else {\n              const [lastBoxPosition, lastBoxOption] = currentPath.pop();\n\n              storeForbiddenPath(forbiddenPathsDict, String(currentPath), lastBoxPosition, lastBoxOption);\n\n              if (currentPath.length === 0) {\n                  field = createField(width, height);\n\n                  prevPrevNumBoxes = 0;\n                  prevPrevState = _.cloneDeep(field);\n\n                  prevNumBoxes = 0;\n                  prevState = _.cloneDeep(field);\n\n                  numBoxesSoFar = 0;\n              } else {\n                  numBoxesSoFar = prevNumBoxes;\n                  field = _.cloneDeep(prevState);\n\n                  prevNumBoxes = prevPrevNumBoxes;\n                  prevState = _.cloneDeep(prevPrevState);\n              }\n          }\n      }\n\n      runNumber++;\n\n      if (runNumber % 1 === 0) {\n          console.log(runNumber, numBoxesSoFar);\n      }\n\n      if (runNumber % 6 === 0) {\n          break;\n      }\n\n      if (prevNumBoxes === prevPrevNumBoxes && prevNumBoxes === numBoxesSoFar) {\n          theSequence = findSequenceOfLengthBest(width * height, boxOptions.map(x => x[2]), numBoxes);\n          theSequence.sort((a, b) => b - a);\n\n          field = createField(width, height);\n\n          prevPrevNumBoxes = 0;\n          prevPrevState = _.cloneDeep(field);\n\n          prevNumBoxes = 0;\n          prevState = _.cloneDeep(field);\n\n          numBoxesSoFar = 0;\n          currentPath = [];\n      }\n    }\n\n    visualizeField(field, width, height).then((visualized) => setField(visualized));\n  };\n\n\n\n  return (\n    <div className=\"app\">\n\n      <div className=\"heading\">\n        <h3> 弁当屋 🍱 </h3> \n      </div>\n\n      <div className=\"inputs\">\n        {/* Four Number Input Fields */}\n        <div>\n          <label htmlFor=\"width\">Width:</label>\n          <br />\n          <input type=\"number\" id=\"width\" placeholder={width} value={width} onChange={handleWidthChange} min=\"2\" />\n        </div>\n        <div>\n          <label htmlFor=\"height\">Height:</label>\n          <br />\n          <input type=\"number\" id=\"height\" placeholder={height} value={height} onChange={handleHeightChange} min=\"2\"/>\n        </div>\n        <div>\n          <label htmlFor=\"input3\">Num Boxes:</label>\n          <br />\n          <input type=\"number\" id=\"input3\" placeholder={numBoxes} value={numBoxes} onChange={handleNumBoxesChange} min=\"1\"/>\n        </div>\n        <div>\n          <label htmlFor=\"input4\">Min Size:</label>\n          <br />\n          <input type=\"number\" id=\"input4\" placeholder={minSize} value={minSize} onChange={handleMinSizeChange} min=\"1\"/>\n        </div>\n        <div>\n          <label htmlFor=\"input5\">Max Size:</label>\n          <br />\n          <input type=\"number\" id=\"input5\" placeholder={maxSize} value={maxSize} onChange={handleMaxSizeChange} min=\"1\"/>\n        </div>\n\n        <button onClick={handleGenerateField}> Generate </button>\n      </div>\n\n      <div className=\"bentoArea\">\n        {sequence}\n        {field}\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAGC,QAAQ,CAAEC,SAAS,KAAO,OAAO,CAChD,MAAO,WAAW,CAClB,OAASC,aAAa,KAAQ,cAAc,CAC5C,OAASC,YAAY,KAAQ,oBAAoB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAElD,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAAAC,CAAC,CAAGC,OAAO,CAAC,QAAQ,CAAC,CAE3B,KAAM,CAAAC,cAAc,CAAG,CACvBC,MAAM,CAAE,yCAAyC,CACjDC,UAAU,CAAE,iCAAiC,CAC7CC,SAAS,CAAE,iBAAiB,CAC5BC,aAAa,CAAE,6BAA6B,CAC5CC,iBAAiB,CAAE,cAAc,CACjCC,KAAK,CAAE,2CAA2C,CAClDC,aAAa,CAAE,cACf,CAAC,CAED;AACA,KAAM,CAAAC,GAAG,CAAGjB,aAAa,CAACS,cAAc,CAAC,CACzC,KAAM,CAAAS,SAAS,CAAGjB,YAAY,CAACgB,GAAG,CAAC,CAEnC,KAAM,CAACE,KAAK,CAAEC,QAAQ,CAAC,CAAGtB,QAAQ,CAAC,CAAC,CAAC,CACrC,KAAM,CAACuB,MAAM,CAAEC,SAAS,CAAC,CAAGxB,QAAQ,CAAC,CAAC,CAAC,CACvC,KAAM,CAACyB,QAAQ,CAAEC,WAAW,CAAC,CAAG1B,QAAQ,CAAC,CAAC,CAAC,CAC3C,KAAM,CAAC2B,OAAO,CAAEC,UAAU,CAAC,CAAG5B,QAAQ,CAAC,CAAC,CAAC,CACzC,KAAM,CAAC6B,OAAO,CAAEC,UAAU,CAAC,CAAG9B,QAAQ,CAAC,CAAC,CAAC,CAEzC,KAAM,CAAC+B,QAAQ,CAAEC,WAAW,CAAC,CAAGhC,QAAQ,CAAC,EAAE,CAAC,CAC5C,KAAM,CAACiC,KAAK,CAAEC,QAAQ,CAAC,CAAGlC,QAAQ,CAAC,EAAE,CAAC,CAEtC,KAAM,CAAAmC,WAAW,CAAGA,CAACd,KAAK,CAAEE,MAAM,GAAK,CACrC,KAAM,CAAAa,QAAQ,CAAGC,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAEhB,MAAO,CAAC,CAAE,IAC9Cc,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAElB,KAAM,CAAC,CAAE,IAAM,IAAI,CAC1C,CAAC,CACD,MAAO,CAAAe,QAAQ,CACjB,CAAC,CAED;AACA,KAAM,CAAAI,aAAa,CAAG,KAAO,CAAAC,MAAM,EAAK,CACtC,KAAM,CAAAC,UAAU,CAAG,KAAM,CAAAC,MAAM,CAACC,MAAM,CAACC,MAAM,CAAC,SAAS,CAAE,GAAI,CAAAC,WAAW,CAAC,CAAC,CAACC,MAAM,CAACN,MAAM,CAAC,CAAC,CAC1F,KAAM,CAAAO,SAAS,CAAGX,KAAK,CAACC,IAAI,CAAC,GAAI,CAAAW,UAAU,CAACP,UAAU,CAAC,CAAC,CACxD,KAAM,CAAAQ,OAAO,CAAGF,SAAS,CAACG,GAAG,CAAEC,CAAC,EAAKA,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAE,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,CAE9E;AACA,KAAM,CAAAC,CAAC,CAAGC,QAAQ,CAACP,OAAO,CAACQ,SAAS,CAAC,CAAC,CAAE,CAAC,CAAC,CAAE,EAAE,CAAC,CAAG,GAAG,CAAE;AACvD,KAAM,CAAAC,CAAC,CAAGF,QAAQ,CAACP,OAAO,CAACQ,SAAS,CAAC,CAAC,CAAE,EAAE,CAAC,CAAE,EAAE,CAAC,CAAG,GAAG,CAAE;AACxD,KAAM,CAAAN,CAAC,CAAGK,QAAQ,CAACP,OAAO,CAACQ,SAAS,CAAC,EAAE,CAAE,EAAE,CAAC,CAAE,EAAE,CAAC,CAAG,GAAG,CAAE;AAEzD,aAAAE,MAAA,CAAcJ,CAAC,OAAAI,MAAA,CAAKD,CAAC,OAAAC,MAAA,CAAKR,CAAC,MAC7B,CAAC,CAED;AACA,KAAM,CAAAS,cAAc,CAAG,KAAAA,CAAO5B,KAAK,CAAC6B,CAAC,CAACC,CAAC,GAAK,CAC1C,KAAM,CAAAC,IAAI,CAAG,EAAE,EAAIF,CAAC,CAAGC,CAAC,CAAGD,CAAC,CAAG,CAAC,CAACC,CAAC,CAAC,CAEnC,KAAM,CAAAE,OAAO,IAAAL,MAAA,CAAMI,IAAI,MAAI,CAE3B,KAAM,CAAAE,eAAe,CAAG,EAAE,CAC1B,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGlC,KAAK,CAACM,MAAM,CAAE4B,CAAC,EAAE,CAAE,CACrC,KAAM,CAAAC,GAAG,CAAG,EAAE,CACd,IAAK,GAAI,CAAAC,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGpC,KAAK,CAAC,CAAC,CAAC,CAACM,MAAM,CAAE8B,CAAC,EAAE,CAAE,CACxC,KAAM,CAAAC,KAAK,CAAGrC,KAAK,CAACkC,CAAC,CAAC,CAACE,CAAC,CAAC,GAAK,IAAI,CAAG,OAAO,CAAG,KAAM,CAAA7B,aAAa,CAACP,KAAK,CAACkC,CAAC,CAAC,CAACE,CAAC,CAAC,CAAC,CAC/ED,GAAG,CAACG,IAAI,cACNlE,IAAA,QAEEmE,KAAK,CAAE,CACLnD,KAAK,CAAE4C,OAAO,CACd1C,MAAM,CAAE0C,OAAO,CACfQ,eAAe,CAAEH,KAAK,CACtBI,OAAO,CAAET,OAAO,CAChBU,WAAW,CAAE,KAAK,CAClBC,MAAM,CAAE,iBAAiB,CACzBC,OAAO,CAAE,cACX,CAAE,KAAAjB,MAAA,CATMO,CAAC,MAAAP,MAAA,CAAIS,CAAC,CAUf,CACH,CAAC,CACH,CACAH,eAAe,CAACK,IAAI,cAAClE,IAAA,QAAamE,KAAK,CAAE,CAACM,UAAU,CAAE,KAAK,CAAE,CAAAC,QAAA,CAAEX,GAAG,EAAnCD,CAAyC,CAAC,CAAC,CAC5E,CACA,MAAO,CAAAD,eAAe,CACxB,CAAC,CAED;AACAjE,SAAS,CAAC,IAAM,CACd,KAAM,CAAA+E,YAAY,CAAG7C,WAAW,CAACd,KAAK,CAAEE,MAAM,CAAC,CAC/CsC,cAAc,CAACmB,YAAY,CAAE3D,KAAK,CAAEE,MAAM,CAAC,CAAC0D,IAAI,CAAEC,UAAU,EAAKhD,QAAQ,CAACgD,UAAU,CAAC,CAAC,CACxF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAC,iBAAiB,CAAIC,CAAC,EAAK,CAC/B9D,QAAQ,CAACmC,QAAQ,CAAC2B,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CACpC,CAAC,CAED,KAAM,CAAAC,kBAAkB,CAAIH,CAAC,EAAK,CAChC5D,SAAS,CAACiC,QAAQ,CAAC2B,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CACrC,CAAC,CAED,KAAM,CAAAE,oBAAoB,CAAIJ,CAAC,EAAK,CAClC1D,WAAW,CAAC+B,QAAQ,CAAC2B,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CACvC,CAAC,CAED,KAAM,CAAAG,mBAAmB,CAAIL,CAAC,EAAK,CACjCxD,UAAU,CAAC6B,QAAQ,CAAC2B,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CACtC,CAAC,CAED,KAAM,CAAAI,mBAAmB,CAAIN,CAAC,EAAK,CACjCtD,UAAU,CAAC2B,QAAQ,CAAC2B,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CACtC,CAAC,CAED,QAAS,CAAAK,aAAaA,CAAChE,OAAO,CAAEE,OAAO,CAAER,KAAK,CAAEE,MAAM,CAAE,CACtD,KAAM,CAAAqE,OAAO,CAAG,GAAI,CAAAC,GAAG,CAAC,CAAC,CACzB,IAAK,GAAI,CAAA1B,CAAC,CAAGxC,OAAO,CAAEwC,CAAC,EAAItC,OAAO,CAAEsC,CAAC,EAAE,CAAE,CACvC,IAAK,GAAI,CAAAE,CAAC,CAAG1C,OAAO,CAAE0C,CAAC,EAAIxC,OAAO,CAAEwC,CAAC,EAAE,CAAE,CACvC,GAAIA,CAAC,EAAI9C,MAAM,EAAI4C,CAAC,EAAI9C,KAAK,CAAE,CAC7BuE,OAAO,CAACE,GAAG,CAAC,CAAC3B,CAAC,CAAEE,CAAC,CAAEF,CAAC,CAAGE,CAAC,CAAC,CAAChB,QAAQ,CAAC,CAAC,CAAC,CACrCuC,OAAO,CAACE,GAAG,CAAC,CAACzB,CAAC,CAAEF,CAAC,CAAEA,CAAC,CAAGE,CAAC,CAAC,CAAChB,QAAQ,CAAC,CAAC,CAAC,CACvC,CACF,CACF,CAEA,MAAO,CAAAhB,KAAK,CAACC,IAAI,CAACsD,OAAO,CAAC,CAACG,IAAI,CAAC,CAACC,CAAC,CAAE5C,CAAC,GAAKA,CAAC,CAAC,CAAC,CAAC,CAAG4C,CAAC,CAAC,CAAC,CAAC,CAAC,CACxD,CAEA,QAAS,CAAAC,wBAAwBA,CAACC,MAAM,CAAEC,IAAI,CAAE5D,MAAM,CAAE,CACtD6D,OAAO,CAACD,IAAI,CAAC,CAEb,KAAM,CAAAE,EAAE,CAAGhE,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAEA,MAAM,CAAG,CAAE,CAAC,CAAE,IAAMF,KAAK,CAAC6D,MAAM,CAAG,CAAC,CAAC,CAACI,IAAI,CAAC,IAAI,CAAC,CAAC,CAEjF,GAAI,CACFD,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAG,EAAE,CACf,CAAE,MAAOjB,CAAC,CAAE,CACV,MAAO,EAAE,CACX,CAEA,IAAK,GAAI,CAAAjB,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAI5B,MAAM,CAAE4B,CAAC,EAAE,CAAE,CAChC,IAAK,GAAI,CAAAE,CAAC,CAAG,CAAC,CAAEA,CAAC,EAAI6B,MAAM,CAAE7B,CAAC,EAAE,CAAE,CAChC,IAAK,KAAM,CAAAkC,GAAG,GAAI,CAAAJ,IAAI,CAAE,CACtB,GAAI9B,CAAC,CAAGkC,GAAG,EAAI,CAAC,EAAIF,EAAE,CAAClC,CAAC,CAAG,CAAC,CAAC,CAACE,CAAC,CAAGkC,GAAG,CAAC,GAAK,IAAI,CAAE,CAC/C,GAAIF,EAAE,CAAClC,CAAC,CAAC,CAACE,CAAC,CAAC,GAAK,IAAI,EAAIgC,EAAE,CAAClC,CAAC,CAAC,CAACE,CAAC,CAAC,CAAC9B,MAAM,CAAG4B,CAAC,CAAE,CAC5CkC,EAAE,CAAClC,CAAC,CAAC,CAACE,CAAC,CAAC,CAAGgC,EAAE,CAAClC,CAAC,CAAG,CAAC,CAAC,CAACE,CAAC,CAAGkC,GAAG,CAAC,CAAC3C,MAAM,CAAC,CAAC2C,GAAG,CAAC,CAAC,CAC7C,CACF,CACF,CACF,CACF,CAEA,MAAO,CAAAF,EAAE,CAAC9D,MAAM,CAAC,CAAC2D,MAAM,CAAC,GAAK,IAAI,CAAGG,EAAE,CAAC9D,MAAM,CAAC,CAAC2D,MAAM,CAAC,CAAG,EAAE,CAC9D,CAEA;AACA,QAAS,CAAAE,OAAOA,CAACI,KAAK,CAAE,CACtB,GAAI,CAAAC,YAAY,CAAGD,KAAK,CAACjE,MAAM,CAAEmE,WAAW,CAC5C,MAAOD,YAAY,GAAK,CAAC,CAAE,CACzBC,WAAW,CAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGJ,YAAY,CAAC,CACtDA,YAAY,EAAE,CAEd,CAACD,KAAK,CAACC,YAAY,CAAC,CAAED,KAAK,CAACE,WAAW,CAAC,CAAC,CAAG,CAACF,KAAK,CAACE,WAAW,CAAC,CAAEF,KAAK,CAACC,YAAY,CAAC,CAAC,CACvF,CACF,CAEA,QAAS,CAAAK,0BAA0BA,CAAC7E,KAAK,CAAE8E,aAAa,CAAEtF,QAAQ,CAAE,CAClE,IAAK,GAAI,CAAA2C,GAAG,GAAI,CAAAnC,KAAK,CAAE,CACnB,IAAK,GAAI,CAAA+E,OAAO,GAAI,CAAA5C,GAAG,CAAE,CACrB,GAAI4C,OAAO,GAAK,IAAI,CAAE,CAClB,MAAO,MAAK,CAChB,CACJ,CACJ,CAEAC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAACH,aAAa,GAAKtF,QAAQ,CAACsF,aAAa,CAACtF,QAAQ,CAAC,CAE/E,MAAO,CAAAsF,aAAa,GAAKtF,QAAQ,CACnC,CAEA,QAAS,CAAA0F,kBAAkBA,CAACC,kBAAkB,CAAEC,IAAI,CAAEC,QAAQ,CAAEC,SAAS,CAAE,CACzE,GAAIH,kBAAkB,CAACC,IAAI,CAAC,CAAE,CAC1B,GAAI,CAACD,kBAAkB,CAACC,IAAI,CAAC,CAACG,QAAQ,IAAA5D,MAAA,CAAI2D,SAAS,MAAA3D,MAAA,CAAI0D,QAAQ,CAAE,CAAC,CAAE,CAChEF,kBAAkB,CAACC,IAAI,CAAC,CAAC9C,IAAI,IAAAX,MAAA,CAAI2D,SAAS,MAAA3D,MAAA,CAAI0D,QAAQ,CAAE,CAAC,CAC7D,CACJ,CAAC,IAAM,CACHF,kBAAkB,CAACC,IAAI,CAAC,CAAG,IAAAzD,MAAA,CAAI2D,SAAS,MAAA3D,MAAA,CAAI0D,QAAQ,EAAG,CAC3D,CACF,CAEA,QAAS,CAAAG,sBAAsBA,CAACL,kBAAkB,CAAEM,QAAQ,CAAE,CAC1D,MAAO,CAAAN,kBAAkB,CAACM,QAAQ,CAAC,EAAI,EAAE,CAC7C,CAEA,QAAS,CAAAC,qBAAqBA,CAAChG,OAAO,CAAEE,OAAO,CAAEmC,IAAI,CAAE3C,KAAK,CAAEE,MAAM,CAAE,CACpE,KAAM,CAAAqG,UAAU,CAAGjC,aAAa,CAAChE,OAAO,CAAEE,OAAO,CAAER,KAAK,CAAEE,MAAM,CAAC,CACjE0F,OAAO,CAACC,GAAG,CAAC,WAAW,CAACU,UAAU,CAAE,SAAS,CAAC5D,IAAI,CAAC,CACnD,MAAO,CAAA4D,UAAU,CAACC,MAAM,CAACC,CAAC,EAAIA,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAK/D,IAAI,CAAC,CACzD,CAEA,QAAS,CAAAgE,oBAAoBA,CAAC/F,KAAK,CAAEgG,eAAe,CAAE,CACpD,KAAM,CAAAV,SAAS,CAAGU,eAAe,CAACF,KAAK,CAAC,GAAG,CAAC,CAC5C,KAAM,CAAAG,QAAQ,CAAGzE,QAAQ,CAAC8D,SAAS,CAAC,CAAC,CAAC,CAAC,CACvC,KAAM,CAAAY,SAAS,CAAG1E,QAAQ,CAAC8D,SAAS,CAAC,CAAC,CAAC,CAAC,CAExC,KAAM,CAAAa,OAAO,CAAG,EAAE,CAElB,KAAM,CAAAC,IAAI,CAAGpG,KAAK,CAACM,MAAM,CACzB,KAAM,CAAA+F,IAAI,CAAGD,IAAI,CAAG,CAAC,CAAGpG,KAAK,CAAC,CAAC,CAAC,CAACM,MAAM,CAAG,CAAC,CAE3C,IAAK,GAAI,CAAA4B,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGkE,IAAI,CAAGF,SAAS,CAAG,CAAC,CAAEhE,CAAC,EAAE,CAAE,CAC3C,IAAK,GAAI,CAAAE,CAAC,CAAG,CAAC,CAAEA,CAAC,CAAGiE,IAAI,CAAGJ,QAAQ,CAAG,CAAC,CAAE7D,CAAC,EAAE,CAAE,CAC1C4C,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC/C,CAAC,CAACE,CAAC,CAAC,CAC3B,KAAM,CAAAkE,MAAM,CAAGtG,KAAK,CAACuG,KAAK,CAACrE,CAAC,CAAEA,CAAC,CAAGgE,SAAS,CAAC,CAAChF,GAAG,CAACiB,GAAG,EAAIA,GAAG,CAACoE,KAAK,CAACnE,CAAC,CAAEA,CAAC,CAAG6D,QAAQ,CAAC,CAAC,CACnF,KAAM,CAAAO,UAAU,CAAGF,MAAM,CAACG,KAAK,CAACtE,GAAG,EAAIA,GAAG,CAACsE,KAAK,CAACC,IAAI,EAAIA,IAAI,GAAK,IAAI,CAAC,CAAC,CACxE,GAAIF,UAAU,CAAE,CACZL,OAAO,CAAC7D,IAAI,CAAC,CAACJ,CAAC,CAAEE,CAAC,CAAC,CAAC,CACxB,CACJ,CACJ,CAEA,MAAO,CAAA+D,OAAO,CAChB,CAEA,QAAS,CAAAQ,cAAcA,CAAC3G,KAAK,CAAE4G,KAAK,CAAEZ,eAAe,CAAEa,OAAO,CAAE,CAC9D7B,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAE2B,KAAK,CAAC,CAC3C,KAAM,CAAAE,SAAS,CAAG9G,KAAK,CAACkB,GAAG,CAACiB,GAAG,EAAI,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAE;AAE9C,KAAM,CAAAmD,SAAS,CAAGU,eAAe,CAACF,KAAK,CAAC,GAAG,CAAC,CAC5C,KAAM,CAAAG,QAAQ,CAAGzE,QAAQ,CAAC8D,SAAS,CAAC,CAAC,CAAC,CAAC,CACvC,KAAM,CAAAY,SAAS,CAAG1E,QAAQ,CAAC8D,SAAS,CAAC,CAAC,CAAC,CAAC,CAExC,KAAM,CAACO,CAAC,CAAEkB,CAAC,CAAC,CAAGH,KAAK,CACpB,IAAK,GAAI,CAAA1E,CAAC,CAAG2D,CAAC,CAAE3D,CAAC,CAAG2D,CAAC,CAAGK,SAAS,CAAEhE,CAAC,EAAE,CAAE,CACpC,IAAK,GAAI,CAAAE,CAAC,CAAG2E,CAAC,CAAE3E,CAAC,CAAG2E,CAAC,CAAGd,QAAQ,CAAE7D,CAAC,EAAE,CAAE,CACnC4C,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC,CACtC6B,SAAS,CAAC5E,CAAC,CAAC,CAACE,CAAC,CAAC,KAAAT,MAAA,CAAOkF,OAAO,CAAE,CACnC,CACJ,CAEA,MAAO,CAAAC,SAAS,CAClB,CAGA;AACA,KAAM,CAAAE,mBAAmB,CAAGA,CAAA,GAAM,CAChC,GAAI,CAAAhH,KAAK,CAAGE,WAAW,CAACd,KAAK,CAAEE,MAAM,CAAC,CAEtC,KAAM,CAAAqG,UAAU,CAAGjC,aAAa,CAAChE,OAAO,CAAEE,OAAO,CAAER,KAAK,CAAEE,MAAM,CAAC,CAEjE,KAAM,CAAA2H,QAAQ,CAAGtB,UAAU,CAACzE,GAAG,CAAE2E,CAAC,EAAKA,CAAC,CAAC,CAAC,CAAC,CAAC,CAE5C,GAAI,CAAAqB,WAAW,CAAGlD,wBAAwB,CAAC5E,KAAK,CAAGE,MAAM,CAAE2H,QAAQ,CAAEzH,QAAQ,CAAC,CAC9E0H,WAAW,CAACpD,IAAI,CAAC,CAACC,CAAC,CAAE5C,CAAC,GAAKA,CAAC,CAAG4C,CAAC,CAAC,CAEjChE,WAAW,CAACmH,WAAW,CAAC9F,QAAQ,CAAC,CAAC,CAAC,CAEnC,GAAI,CAAA+F,aAAa,CAAG3I,CAAC,CAAC4I,SAAS,CAACpH,KAAK,CAAC,CACtC,GAAI,CAAAqH,SAAS,CAAG7I,CAAC,CAAC4I,SAAS,CAACpH,KAAK,CAAC,CAElC,GAAI,CAAAsH,gBAAgB,CAAG,CAAC,CACxB,GAAI,CAAAC,YAAY,CAAG,CAAC,CACpB,KAAM,CAAApC,kBAAkB,CAAG,CAAC,CAAC,CAC7B,GAAI,CAAAqC,SAAS,CAAG,CAAC,CAEjB,GAAI,CAAA1C,aAAa,CAAG,CAAC,CACrB,GAAI,CAAA2C,WAAW,CAAG,EAAE,CAEpB,MAAO,CAAC5C,0BAA0B,CAAC7E,KAAK,CAAE8E,aAAa,CAAC,CAAE,CACxD,KAAM,CAAA4C,eAAe,CAAGR,WAAW,CAACpC,aAAa,CAAC,CAClD,KAAM,CAAA6C,kBAAkB,CAAGjC,qBAAqB,CAAChG,OAAO,CAAEE,OAAO,CAAE8H,eAAe,CAAEtI,KAAK,CAAEE,MAAM,CAAC,CAElG,GAAI,CAAAsI,gBAAgB,CAAG,KAAK,CAC5B,GAAI,CAAAC,YAAY,CAAG,IAAI,CACvB,GAAI,CAAAC,WAAW,CAAG,IAAI,CAEtB9C,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAACyC,eAAe,CAAC,CAChD1C,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC0C,kBAAkB,CAAC,CAEtD,IAAK,KAAM,CAAArC,SAAS,GAAI,CAAAqC,kBAAkB,CAAE,CACxC,KAAM,CAAAI,gBAAgB,CAAGhC,oBAAoB,CAAC/F,KAAK,CAAEsF,SAAS,CAAC,CAC/DN,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC8C,gBAAgB,CAAC,CAClD,KAAM,CAAAC,qBAAqB,CAAG,EAAE,CAEhC,IAAK,KAAM,CAAAC,cAAc,GAAI,CAAAF,gBAAgB,CAAE,CAC3C,KAAM,CAAAG,OAAO,IAAAvG,MAAA,CAAMsG,cAAc,MAAAtG,MAAA,CAAI2D,SAAS,CAAE,CAChD,GAAI,CAACE,sBAAsB,CAACL,kBAAkB,CAAEgD,MAAM,CAACV,WAAW,CAAC,CAAC,CAAClC,QAAQ,CAAC2C,OAAO,CAAC,CAAE,CACpFlD,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAACgD,cAAc,CAAC3C,SAAS,CAAC,CACxD0C,qBAAqB,CAAC1F,IAAI,CAAC2F,cAAc,CAAC,CAC9C,CACJ,CAEA,GAAID,qBAAqB,CAAC1H,MAAM,CAAG,CAAC,CAAE,CAClCsH,gBAAgB,CAAG,IAAI,CACvBC,YAAY,CAAGvC,SAAS,CACxB,GAAI0C,qBAAqB,CAACI,IAAI,CAACxB,KAAK,EAAIA,KAAK,CAAC,CAAC,CAAC,GAAK,CAAC,EAAIA,KAAK,CAAC,CAAC,CAAC,GAAK,CAAC,CAAC,CAAE,CACzEkB,WAAW,CAAG,CAAC,CAAC,CAAE,CAAC,CAAC,CACtB,CAAC,IAAM,CACLA,WAAW,CAAGE,qBAAqB,CAACtD,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAGoD,qBAAqB,CAAC1H,MAAM,CAAC,CAAC,CAC/F,CACA,MACJ,CACJ,CAEA,GAAIsH,gBAAgB,CAAE,CAClBN,gBAAgB,CAAGC,YAAY,CAC/BJ,aAAa,CAAG3I,CAAC,CAAC4I,SAAS,CAACC,SAAS,CAAC,CACtCE,YAAY,CAAGzC,aAAa,CAC5BuC,SAAS,CAAG7I,CAAC,CAAC4I,SAAS,CAACpH,KAAK,CAAC,CAC9B,KAAM,CAAAqI,cAAc,CAAG1B,cAAc,CAAC3G,KAAK,CAAE8H,WAAW,CAAED,YAAY,CAAE/C,aAAa,CAAC,CACtF9E,KAAK,CAAGxB,CAAC,CAAC4I,SAAS,CAACiB,cAAc,CAAC,CACnCvD,aAAa,EAAE,CAEf2C,WAAW,CAACnF,IAAI,CAAC,CAACuF,YAAY,CAAEC,WAAW,CAAC,CAAC,CACjD,CAAC,IAAM,CACH,GAAIL,WAAW,CAACnH,MAAM,GAAK,CAAC,CAAE,CAC1BN,KAAK,CAAGE,WAAW,CAACd,KAAK,CAAEE,MAAM,CAAC,CAElCgI,gBAAgB,CAAG,CAAC,CACpBH,aAAa,CAAG3I,CAAC,CAAC4I,SAAS,CAACpH,KAAK,CAAC,CAElCuH,YAAY,CAAG,CAAC,CAChBF,SAAS,CAAG7I,CAAC,CAAC4I,SAAS,CAACpH,KAAK,CAAC,CAE9B8E,aAAa,CAAG,CAAC,CACrB,CAAC,IAAM,CACH,KAAM,CAACwD,eAAe,CAAEC,aAAa,CAAC,CAAGd,WAAW,CAACe,GAAG,CAAC,CAAC,CAE1DtD,kBAAkB,CAACC,kBAAkB,CAAEgD,MAAM,CAACV,WAAW,CAAC,CAAEa,eAAe,CAAEC,aAAa,CAAC,CAE3F,GAAId,WAAW,CAACnH,MAAM,GAAK,CAAC,CAAE,CAC1BN,KAAK,CAAGE,WAAW,CAACd,KAAK,CAAEE,MAAM,CAAC,CAElCgI,gBAAgB,CAAG,CAAC,CACpBH,aAAa,CAAG3I,CAAC,CAAC4I,SAAS,CAACpH,KAAK,CAAC,CAElCuH,YAAY,CAAG,CAAC,CAChBF,SAAS,CAAG7I,CAAC,CAAC4I,SAAS,CAACpH,KAAK,CAAC,CAE9B8E,aAAa,CAAG,CAAC,CACrB,CAAC,IAAM,CACHA,aAAa,CAAGyC,YAAY,CAC5BvH,KAAK,CAAGxB,CAAC,CAAC4I,SAAS,CAACC,SAAS,CAAC,CAE9BE,YAAY,CAAGD,gBAAgB,CAC/BD,SAAS,CAAG7I,CAAC,CAAC4I,SAAS,CAACD,aAAa,CAAC,CAC1C,CACJ,CACJ,CAEAK,SAAS,EAAE,CAEX,GAAIA,SAAS,CAAG,CAAC,GAAK,CAAC,CAAE,CACrBxC,OAAO,CAACC,GAAG,CAACuC,SAAS,CAAE1C,aAAa,CAAC,CACzC,CAEA,GAAI0C,SAAS,CAAG,CAAC,GAAK,CAAC,CAAE,CACrB,MACJ,CAEA,GAAID,YAAY,GAAKD,gBAAgB,EAAIC,YAAY,GAAKzC,aAAa,CAAE,CACrEoC,WAAW,CAAGlD,wBAAwB,CAAC5E,KAAK,CAAGE,MAAM,CAAEqG,UAAU,CAACzE,GAAG,CAAC2E,CAAC,EAAIA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAErG,QAAQ,CAAC,CAC3F0H,WAAW,CAACpD,IAAI,CAAC,CAACC,CAAC,CAAE5C,CAAC,GAAKA,CAAC,CAAG4C,CAAC,CAAC,CAEjC/D,KAAK,CAAGE,WAAW,CAACd,KAAK,CAAEE,MAAM,CAAC,CAElCgI,gBAAgB,CAAG,CAAC,CACpBH,aAAa,CAAG3I,CAAC,CAAC4I,SAAS,CAACpH,KAAK,CAAC,CAElCuH,YAAY,CAAG,CAAC,CAChBF,SAAS,CAAG7I,CAAC,CAAC4I,SAAS,CAACpH,KAAK,CAAC,CAE9B8E,aAAa,CAAG,CAAC,CACjB2C,WAAW,CAAG,EAAE,CACpB,CACF,CAEA7F,cAAc,CAAC5B,KAAK,CAAEZ,KAAK,CAAEE,MAAM,CAAC,CAAC0D,IAAI,CAAEC,UAAU,EAAKhD,QAAQ,CAACgD,UAAU,CAAC,CAAC,CACjF,CAAC,CAID,mBACE3E,KAAA,QAAKmK,SAAS,CAAC,KAAK,CAAA3F,QAAA,eAElB1E,IAAA,QAAKqK,SAAS,CAAC,SAAS,CAAA3F,QAAA,cACtB1E,IAAA,OAAA0E,QAAA,CAAI,mCAAQ,CAAI,CAAC,CACd,CAAC,cAENxE,KAAA,QAAKmK,SAAS,CAAC,QAAQ,CAAA3F,QAAA,eAErBxE,KAAA,QAAAwE,QAAA,eACE1E,IAAA,UAAOsK,OAAO,CAAC,OAAO,CAAA5F,QAAA,CAAC,QAAM,CAAO,CAAC,cACrC1E,IAAA,QAAK,CAAC,cACNA,IAAA,UAAOuK,IAAI,CAAC,QAAQ,CAACC,EAAE,CAAC,OAAO,CAACC,WAAW,CAAEzJ,KAAM,CAACiE,KAAK,CAAEjE,KAAM,CAAC0J,QAAQ,CAAE5F,iBAAkB,CAAC6F,GAAG,CAAC,GAAG,CAAE,CAAC,EACtG,CAAC,cACNzK,KAAA,QAAAwE,QAAA,eACE1E,IAAA,UAAOsK,OAAO,CAAC,QAAQ,CAAA5F,QAAA,CAAC,SAAO,CAAO,CAAC,cACvC1E,IAAA,QAAK,CAAC,cACNA,IAAA,UAAOuK,IAAI,CAAC,QAAQ,CAACC,EAAE,CAAC,QAAQ,CAACC,WAAW,CAAEvJ,MAAO,CAAC+D,KAAK,CAAE/D,MAAO,CAACwJ,QAAQ,CAAExF,kBAAmB,CAACyF,GAAG,CAAC,GAAG,CAAC,CAAC,EACzG,CAAC,cACNzK,KAAA,QAAAwE,QAAA,eACE1E,IAAA,UAAOsK,OAAO,CAAC,QAAQ,CAAA5F,QAAA,CAAC,YAAU,CAAO,CAAC,cAC1C1E,IAAA,QAAK,CAAC,cACNA,IAAA,UAAOuK,IAAI,CAAC,QAAQ,CAACC,EAAE,CAAC,QAAQ,CAACC,WAAW,CAAErJ,QAAS,CAAC6D,KAAK,CAAE7D,QAAS,CAACsJ,QAAQ,CAAEvF,oBAAqB,CAACwF,GAAG,CAAC,GAAG,CAAC,CAAC,EAC/G,CAAC,cACNzK,KAAA,QAAAwE,QAAA,eACE1E,IAAA,UAAOsK,OAAO,CAAC,QAAQ,CAAA5F,QAAA,CAAC,WAAS,CAAO,CAAC,cACzC1E,IAAA,QAAK,CAAC,cACNA,IAAA,UAAOuK,IAAI,CAAC,QAAQ,CAACC,EAAE,CAAC,QAAQ,CAACC,WAAW,CAAEnJ,OAAQ,CAAC2D,KAAK,CAAE3D,OAAQ,CAACoJ,QAAQ,CAAEtF,mBAAoB,CAACuF,GAAG,CAAC,GAAG,CAAC,CAAC,EAC5G,CAAC,cACNzK,KAAA,QAAAwE,QAAA,eACE1E,IAAA,UAAOsK,OAAO,CAAC,QAAQ,CAAA5F,QAAA,CAAC,WAAS,CAAO,CAAC,cACzC1E,IAAA,QAAK,CAAC,cACNA,IAAA,UAAOuK,IAAI,CAAC,QAAQ,CAACC,EAAE,CAAC,QAAQ,CAACC,WAAW,CAAEjJ,OAAQ,CAACyD,KAAK,CAAEzD,OAAQ,CAACkJ,QAAQ,CAAErF,mBAAoB,CAACsF,GAAG,CAAC,GAAG,CAAC,CAAC,EAC5G,CAAC,cAEN3K,IAAA,WAAQ4K,OAAO,CAAEhC,mBAAoB,CAAAlE,QAAA,CAAC,YAAU,CAAQ,CAAC,EACtD,CAAC,cAENxE,KAAA,QAAKmK,SAAS,CAAC,WAAW,CAAA3F,QAAA,EACvBhD,QAAQ,CACRE,KAAK,EACH,CAAC,EAEH,CAAC,CAEV,CAEA,cAAe,CAAAzB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}