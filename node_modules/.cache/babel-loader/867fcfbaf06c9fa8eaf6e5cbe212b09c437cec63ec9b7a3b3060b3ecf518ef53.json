{"ast":null,"code":"var _jsxFileName = \"/Users/Talha/repos/steed/bento/bentoApp/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { ColorRing } from 'react-loader-spinner';\n//import Worker from './worker.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const _ = require('lodash');\n  const firebaseConfig = {\n    apiKey: \"AIzaSyDs7OhdjYAaLsZeDBEXyxi3hGxfIVEmnac\",\n    authDomain: \"bento-app-b64c5.firebaseapp.com\",\n    projectId: \"bento-app-b64c5\",\n    storageBucket: \"bento-app-b64c5.appspot.com\",\n    messagingSenderId: \"738546689884\",\n    appId: \"1:738546689884:web:1dbe62feaa2770b7d48399\",\n    measurementId: \"G-4N1P5BG8ZF\"\n  };\n\n  // Initialize Firebase\n  const app = initializeApp(firebaseConfig);\n  const analytics = getAnalytics(app);\n  const [width, setWidth] = useState(8);\n  const [height, setHeight] = useState(4);\n  const [numBoxes, setNumBoxes] = useState(7);\n  const [minSize, setMinSize] = useState(1);\n  const [maxSize, setMaxSize] = useState(4);\n  const [sequence, setSequence] = useState([]);\n  const [field, setField] = useState([]);\n  const [processing, setProcessing] = useState(false);\n  const [error, setError] = useState(false);\n  const createField = (width, height) => {\n    const newField = Array.from({\n      length: height\n    }, () => Array.from({\n      length: width\n    }, () => '**'));\n    return newField;\n  };\n\n  // Function to convert a string to a color\n  const stringToColor = async string => {\n    const hashBuffer = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(string));\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n\n    // Generate warm colors by focusing on the warm spectrum\n    const r = parseInt(hashHex.substring(0, 6), 16) % 256; // Red component\n    const g = parseInt(hashHex.substring(6, 12), 16) % 200; // Green component\n    const b = parseInt(hashHex.substring(12, 18), 16) % 100; // Blue component\n\n    return `rgb(${r}, ${g}, ${b})`;\n  };\n\n  // Function to visualize the field\n  const visualizeField = async (field, w, h) => {\n    const size = 10 / (w > h ? w : 2 * h);\n    const boxSize = `${size}em`;\n    const visualizedField = [];\n    for (let i = 0; i < field.length; i++) {\n      const row = [];\n      for (let j = 0; j < field[0].length; j++) {\n        const color = field[i][j] === '**' ? '#FFFCF0' : await stringToColor(field[i][j]);\n        row.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: boxSize,\n            height: boxSize,\n            backgroundColor: color,\n            padding: boxSize,\n            marginRight: '0em',\n            border: '1px solid #282726',\n            display: 'inline-block'\n          }\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this));\n      }\n      visualizedField.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          lineHeight: '0em'\n        },\n        children: row\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 28\n      }, this));\n    }\n    return visualizedField;\n  };\n\n  // Create initial field when component mounts\n  useEffect(() => {\n    const initialField = createField(width, height);\n    visualizeField(initialField, width, height).then(visualized => setField(visualized));\n  }, []);\n  useEffect(() => {\n    console.log(\"Processing changed: \", processing);\n  }, [processing]);\n  const handleWidthChange = e => {\n    setWidth(parseInt(e.target.value));\n  };\n  const handleHeightChange = e => {\n    setHeight(parseInt(e.target.value));\n  };\n  const handleNumBoxesChange = e => {\n    setNumBoxes(parseInt(e.target.value));\n  };\n  const handleMinSizeChange = e => {\n    setMinSize(parseInt(e.target.value));\n  };\n  const handleMaxSizeChange = e => {\n    setMaxSize(parseInt(e.target.value));\n  };\n  function getBoxOptions(minSize, maxSize, width, height) {\n    const options = new Set();\n    for (let i = minSize; i <= maxSize; i++) {\n      for (let j = minSize; j <= maxSize; j++) {\n        if (j <= height && i <= width) {\n          options.add([i, j, i * j].toString());\n          options.add([j, i, i * j].toString());\n        }\n      }\n    }\n    return Array.from(options).sort((a, b) => b[2] - a[2]);\n  }\n  function findSequenceOfLength(number, numbers, length, boxOptions) {\n    /*const nums = [];\n     for (let i = 0; i < boxOptions.length; i++) {\n      const size = boxOptions[i].split(\",\")[2];\n       if (numbers.includes(size)) {\n        nums.push(size);\n      }\n    }*/\n\n    const nums = numbers;\n    shuffle(nums);\n    let foundSequence = [];\n    function dfs(target, path) {\n      if (target === 0 && path.length === length) {\n        foundSequence = [...path];\n        return;\n      }\n      for (const num of nums) {\n        if (num <= target) {\n          path.push(num);\n          dfs(target - num, path);\n          path.pop();\n        }\n      }\n    }\n    dfs(number, []);\n    return foundSequence;\n  }\n  function findSequenceOfLengthBest(number, numbers, length, boxOptions) {\n    const nums = [];\n    for (let i = 0; i < boxOptions.length; i++) {\n      const size = boxOptions[i].split(\",\")[2];\n      if (numbers.includes(size)) {\n        nums.push(size);\n      }\n    }\n    shuffle(nums);\n    console.log(\"Nums: \", nums);\n    const dp = Array.from({\n      length: length + 1\n    }, () => Array(number + 1).fill(null));\n    try {\n      dp[0][0] = [];\n    } catch (e) {\n      return [];\n    }\n    for (let i = 1; i <= length; i++) {\n      for (let j = 0; j <= number; j++) {\n        for (const num of nums) {\n          if (j - num >= 0 && dp[i - 1][j - num] !== null) {\n            if (dp[i][j] === null || dp[i][j].length < i) {\n              const nextSequence = dp[i - 1][j - num].concat([num]);\n              if (!hasRepetition(nextSequence) || i >= length * 0.8) {\n                dp[i][j] = nextSequence;\n              }\n            }\n          }\n        }\n      }\n    }\n    return dp[length][number] !== null ? dp[length][number] : [];\n  }\n  function generateSequence(targetSum, arr, length) {\n    const result = [];\n    function dfs(currentSum, path) {\n      if (currentSum === targetSum && path.length === length) {\n        result.push([...path]);\n        return;\n      }\n      for (let i = 0; i < arr.length; i++) {\n        if (currentSum + arr[i] <= targetSum) {\n          path.push(arr[i]);\n          dfs(currentSum + arr[i], path);\n          path.pop();\n        }\n      }\n    }\n    dfs(0, []);\n    return result;\n  }\n\n  // Check if there are repetitions in the sequence\n  function hasRepetition(sequence) {\n    for (let i = 1; i < sequence.length; i++) {\n      if (sequence[i] === sequence[i - 1]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Helper function to shuffle an array\n  function shuffle(array) {\n    let currentIndex = array.length,\n      randomIndex;\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n  }\n  function bentoIsFilledAppropriately(field, numBoxesSoFar, numBoxes) {\n    for (let row of field) {\n      for (let element of row) {\n        if (element === \"**\") {\n          return false;\n        }\n      }\n    }\n    console.log(\"Bento filled? \", numBoxesSoFar === numBoxes, numBoxesSoFar, numBoxes);\n    return numBoxesSoFar === numBoxes;\n  }\n  function storeForbiddenPath(forbiddenPathsDict, path, position, boxOption) {\n    if (forbiddenPathsDict[path]) {\n      if (!forbiddenPathsDict[path].includes(`${boxOption},${position}`)) {\n        forbiddenPathsDict[path].push(`${boxOption},${position}`);\n      }\n    } else {\n      forbiddenPathsDict[path] = [`${boxOption},${position}`];\n    }\n  }\n  function retrieveForbiddenPaths(forbiddenPathsDict, basePath) {\n    return forbiddenPathsDict[basePath] || [];\n  }\n  function getBoxOptionsFromSize(minSize, maxSize, size, width, height) {\n    const boxOptions = getBoxOptions(minSize, maxSize, width, height);\n    console.log(\"Box ops: \", boxOptions, \" size: \", size);\n    return boxOptions.filter(x => x.split(\",\")[2] === size);\n  }\n  function findCandidateIndices(field, boxOptionString) {\n    const boxOption = boxOptionString.split(\",\");\n    const boxWidth = parseInt(boxOption[0]);\n    const boxHeight = parseInt(boxOption[1]);\n    const indices = [];\n    const rows = field.length;\n    const cols = rows > 0 ? field[0].length : 0;\n    for (let i = 0; i < rows - boxHeight + 1; i++) {\n      for (let j = 0; j < cols - boxWidth + 1; j++) {\n        const subArr = field.slice(i, i + boxHeight).map(row => row.slice(j, j + boxWidth));\n        const isAllEmpty = subArr.every(row => row.every(elem => elem === \"**\"));\n        if (isAllEmpty) {\n          indices.push([i, j]);\n        }\n      }\n    }\n    return indices;\n  }\n  function augmentWithBox(field, index, boxOptionString, newChar) {\n    console.log(\"Augmentation time!!! \", index);\n    const fieldCopy = field.map(row => [...row]); // Deep copy of the field\n\n    const boxOption = boxOptionString.split(\",\");\n    const boxWidth = parseInt(boxOption[0]);\n    const boxHeight = parseInt(boxOption[1]);\n    const [x, y] = index;\n    for (let i = x; i < x + boxHeight; i++) {\n      for (let j = y; j < y + boxWidth; j++) {\n        console.log(\"Augmentation time!!!XXX\");\n        fieldCopy[i][j] = `*${newChar}`;\n      }\n    }\n    return fieldCopy;\n  }\n\n  // Handle generating a new field\n  const handleGenerateField = async () => {\n    await setProcessing(true);\n    let field = createField(width, height);\n    const boxOptions = getBoxOptions(minSize, maxSize, width, height);\n    const boxSizes = boxOptions.map(x => x.split(\",\")[2]);\n    console.log(\"Box options: \", boxOptions);\n    console.log(\"Box sizes: \", boxSizes);\n    let theSequence = findSequenceOfLengthBest(width * height, boxSizes, numBoxes, boxOptions);\n    //let theSequence = generateSequence(width * height, boxSizes, numBoxes);\n    //shuffle(theSequence);\n    theSequence.sort((a, b) => b - a);\n    setSequence(theSequence.toString());\n    let prevPrevState = _.cloneDeep(field);\n    let prevState = _.cloneDeep(field);\n    let prevPrevNumBoxes = 0;\n    let prevNumBoxes = 0;\n    const forbiddenPathsDict = {};\n    let runNumber = 0;\n    let numBoxesSoFar = 0;\n    let currentPath = [];\n    if (theSequence.length > 0) {\n      while (!bentoIsFilledAppropriately(field, numBoxesSoFar, numBoxes)) {\n        const relevantBoxSize = theSequence[numBoxesSoFar];\n        const relevantBoxOptions = getBoxOptionsFromSize(minSize, maxSize, relevantBoxSize, width, height);\n        let newBoxCanBeAdded = false;\n        let newBoxOption = null;\n        let newBoxIndex = null;\n        console.log(\"relevantBoxSize: \", relevantBoxSize);\n        console.log(\"relevantBoxOptions: \", relevantBoxOptions);\n        for (const boxOption of relevantBoxOptions) {\n          const candidateIndices = findCandidateIndices(field, boxOption);\n          //console.log(\"candidateIndices: \",candidateIndices);\n          const validCandidateIndices = [];\n          for (const candidateIndex of candidateIndices) {\n            const pathStr = `${candidateIndex},${boxOption}`;\n            if (!retrieveForbiddenPaths(forbiddenPathsDict, String(currentPath)).includes(pathStr)) {\n              //console.log(\"ValidCandidate: \",candidateIndex,boxOption)\n              validCandidateIndices.push(candidateIndex);\n            }\n          }\n          if (validCandidateIndices.length > 0) {\n            newBoxCanBeAdded = true;\n            newBoxOption = boxOption;\n            const randomIndex = Math.floor(Math.random() * validCandidateIndices.length);\n            console.log(\"vc length: \", validCandidateIndices.length);\n            console.log(\"randomIndex: \", randomIndex);\n            newBoxIndex = validCandidateIndices[randomIndex];\n            /*\n            if (validCandidateIndices.some(index => index[0] === 0 && index[1] === 0)) {\n              newBoxIndex = [0, 0];\n            } else {\n              newBoxIndex = validCandidateIndices[Math.floor(Math.random() * validCandidateIndices.length)];\n            }*/\n            break;\n          }\n        }\n        if (newBoxCanBeAdded) {\n          prevPrevNumBoxes = prevNumBoxes;\n          prevPrevState = _.cloneDeep(prevState);\n          prevNumBoxes = numBoxesSoFar;\n          prevState = _.cloneDeep(field);\n          const augmentedField = augmentWithBox(field, newBoxIndex, newBoxOption, numBoxesSoFar);\n          field = _.cloneDeep(augmentedField);\n          numBoxesSoFar++;\n          currentPath.push([newBoxOption, newBoxIndex]);\n        } else {\n          if (currentPath.length === 0) {\n            field = createField(width, height);\n            prevPrevNumBoxes = 0;\n            prevPrevState = _.cloneDeep(field);\n            prevNumBoxes = 0;\n            prevState = _.cloneDeep(field);\n            numBoxesSoFar = 0;\n          } else {\n            const [lastBoxPosition, lastBoxOption] = currentPath.pop();\n            storeForbiddenPath(forbiddenPathsDict, String(currentPath), lastBoxPosition, lastBoxOption);\n            if (currentPath.length === 0) {\n              field = createField(width, height);\n              prevPrevNumBoxes = 0;\n              prevPrevState = _.cloneDeep(field);\n              prevNumBoxes = 0;\n              prevState = _.cloneDeep(field);\n              numBoxesSoFar = 0;\n            } else {\n              numBoxesSoFar = prevNumBoxes;\n              field = _.cloneDeep(prevState);\n              prevNumBoxes = prevPrevNumBoxes;\n              prevState = _.cloneDeep(prevPrevState);\n            }\n          }\n        }\n        runNumber++;\n        if (runNumber % 1 === 0) {\n          console.log(runNumber, numBoxesSoFar);\n          console.log(\"path: \", currentPath);\n          console.log(\"numBoxesSoFar: \", numBoxesSoFar);\n        }\n        if (runNumber % 10 === 0) {\n          visualizeField(field, width, height).then(visualized => setField(visualized));\n        }\n        if (runNumber % 10000 === 0) {\n          break;\n        }\n        if (prevNumBoxes === prevPrevNumBoxes && prevNumBoxes === numBoxesSoFar) {\n          theSequence = findSequenceOfLengthBest(width * height, boxOptions.map(x => x.split(\",\")[2]), numBoxes, boxOptions);\n          //let theSequence = generateSequence(width * height, boxSizes, numBoxes);\n          theSequence.sort((a, b) => b - a);\n          setSequence(theSequence.toString());\n          field = createField(width, height);\n          prevPrevNumBoxes = 0;\n          prevPrevState = _.cloneDeep(field);\n          prevNumBoxes = 0;\n          prevState = _.cloneDeep(field);\n          numBoxesSoFar = 0;\n          currentPath = [];\n        }\n      }\n      visualizeField(field, width, height).then(visualized => setField(visualized));\n    }\n    setProcessing(false);\n  };\n\n  // Handle generating a new field\n  const handleGenerateFieldWithWorker = async () => {\n    await setProcessing(true);\n    const worker = new window.Worker(\"worker.js\"); // Create a new instance of the worker\n\n    // Send data to the worker\n    worker.postMessage({\n      width,\n      height,\n      numBoxes,\n      minSize,\n      maxSize\n    });\n    worker.onmessage = function (e) {\n      // Handle the result sent back from the worker\n      const field = e.data;\n      // Update state or UI based on the result\n\n      console.log(\"Message!!!: \", field);\n      if (!field) {\n        setError(true);\n      } else {\n        setError(false);\n        visualizeField(field, width, height).then(visualized => setField(visualized));\n      }\n      setProcessing(false); // Set processing state to false after computation\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"heading\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" \\u5F01\\u5F53\\u5C4B \\uD83C\\uDF71 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputs\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"width\",\n          children: \"Width:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"width\",\n          placeholder: width,\n          value: width,\n          onChange: handleWidthChange,\n          min: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"height\",\n          children: \"Height:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"height\",\n          placeholder: height,\n          value: height,\n          onChange: handleHeightChange,\n          min: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"input3\",\n          children: \"Num Boxes:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"input3\",\n          placeholder: numBoxes,\n          value: numBoxes,\n          onChange: handleNumBoxesChange,\n          min: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"input4\",\n          children: \"Min Size:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"input4\",\n          placeholder: minSize,\n          value: minSize,\n          onChange: handleMinSizeChange,\n          min: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"input5\",\n          children: \"Max Size:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"input5\",\n          placeholder: maxSize,\n          value: maxSize,\n          onChange: handleMaxSizeChange,\n          min: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGenerateFieldWithWorker,\n        children: \" Generate \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bentoArea\",\n      children: [processing && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(ColorRing, {\n          visible: processing,\n          height: \"80\",\n          width: \"80\",\n          ariaLabel: \"blocks-loading\",\n          wrapperStyle: {},\n          wrapperClass: \"blocks-wrapper\",\n          colors: ['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" Please wait. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 9\n      }, this), !processing && error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Invalid num of boxes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 9\n      }, this), !processing && !error && field]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 528,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"kVekQE8JD/jYIiiyfZ/YbP/NJyo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","initializeApp","getAnalytics","ColorRing","jsxDEV","_jsxDEV","App","_s","_","require","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","width","setWidth","height","setHeight","numBoxes","setNumBoxes","minSize","setMinSize","maxSize","setMaxSize","sequence","setSequence","field","setField","processing","setProcessing","error","setError","createField","newField","Array","from","length","stringToColor","string","hashBuffer","crypto","subtle","digest","TextEncoder","encode","hashArray","Uint8Array","hashHex","map","b","toString","padStart","join","r","parseInt","substring","g","visualizeField","w","h","size","boxSize","visualizedField","i","row","j","color","push","style","backgroundColor","padding","marginRight","border","display","fileName","_jsxFileName","lineNumber","columnNumber","lineHeight","children","initialField","then","visualized","console","log","handleWidthChange","e","target","value","handleHeightChange","handleNumBoxesChange","handleMinSizeChange","handleMaxSizeChange","getBoxOptions","options","Set","add","sort","a","findSequenceOfLength","number","numbers","boxOptions","nums","shuffle","foundSequence","dfs","path","num","pop","findSequenceOfLengthBest","split","includes","dp","fill","nextSequence","concat","hasRepetition","generateSequence","targetSum","arr","result","currentSum","array","currentIndex","randomIndex","Math","floor","random","bentoIsFilledAppropriately","numBoxesSoFar","element","storeForbiddenPath","forbiddenPathsDict","position","boxOption","retrieveForbiddenPaths","basePath","getBoxOptionsFromSize","filter","x","findCandidateIndices","boxOptionString","boxWidth","boxHeight","indices","rows","cols","subArr","slice","isAllEmpty","every","elem","augmentWithBox","index","newChar","fieldCopy","y","handleGenerateField","boxSizes","theSequence","prevPrevState","cloneDeep","prevState","prevPrevNumBoxes","prevNumBoxes","runNumber","currentPath","relevantBoxSize","relevantBoxOptions","newBoxCanBeAdded","newBoxOption","newBoxIndex","candidateIndices","validCandidateIndices","candidateIndex","pathStr","String","augmentedField","lastBoxPosition","lastBoxOption","handleGenerateFieldWithWorker","worker","window","Worker","postMessage","onmessage","data","className","htmlFor","type","id","placeholder","onChange","min","onClick","visible","ariaLabel","wrapperStyle","wrapperClass","colors","_c","$RefreshReg$"],"sources":["/Users/Talha/repos/steed/bento/bentoApp/src/App.jsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css'; \nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { ColorRing } from  'react-loader-spinner'\n//import Worker from './worker.js';\n\n\nfunction App() {\n  const _ = require('lodash');\n\n  const firebaseConfig = {\n  apiKey: \"AIzaSyDs7OhdjYAaLsZeDBEXyxi3hGxfIVEmnac\",\n  authDomain: \"bento-app-b64c5.firebaseapp.com\",\n  projectId: \"bento-app-b64c5\",\n  storageBucket: \"bento-app-b64c5.appspot.com\",\n  messagingSenderId: \"738546689884\",\n  appId: \"1:738546689884:web:1dbe62feaa2770b7d48399\",\n  measurementId: \"G-4N1P5BG8ZF\"\n  };\n\n  // Initialize Firebase\n  const app = initializeApp(firebaseConfig);\n  const analytics = getAnalytics(app);\n\n  const [width, setWidth] = useState(8)\n  const [height, setHeight] = useState(4)\n  const [numBoxes, setNumBoxes] = useState(7)\n  const [minSize, setMinSize] = useState(1)\n  const [maxSize, setMaxSize] = useState(4)\n\n  const [sequence, setSequence] = useState([])\n  const [field, setField] = useState([]);\n  const [processing, setProcessing] = useState(false)\n  const [error, setError] = useState(false)\n\n  const createField = (width, height) => {\n    const newField = Array.from({ length: height }, () =>\n      Array.from({ length: width }, () => '**')\n    );\n    return newField;\n  };\n\n  // Function to convert a string to a color\n  const stringToColor = async (string) => {\n    const hashBuffer = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(string));\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray.map((b) => b.toString(16).padStart(2, '0')).join('');\n\n    // Generate warm colors by focusing on the warm spectrum\n    const r = parseInt(hashHex.substring(0, 6), 16) % 256; // Red component\n    const g = parseInt(hashHex.substring(6, 12), 16) % 200; // Green component\n    const b = parseInt(hashHex.substring(12, 18), 16) % 100; // Blue component\n\n    return `rgb(${r}, ${g}, ${b})`;\n  };\n\n  // Function to visualize the field\n  const visualizeField = async (field,w,h) => {\n    const size = 10 / (w > h ? w : 2*h);\n\n    const boxSize = `${size}em`\n\n    const visualizedField = [];\n    for (let i = 0; i < field.length; i++) {\n      const row = [];\n      for (let j = 0; j < field[0].length; j++) {\n        const color = field[i][j] === '**' ? '#FFFCF0' : await stringToColor(field[i][j]);\n        row.push(\n          <div\n            key={`${i}-${j}`}\n            style={{\n              width: boxSize,\n              height: boxSize,\n              backgroundColor: color,\n              padding: boxSize,\n              marginRight: '0em',\n              border: '1px solid #282726',\n              display: 'inline-block',\n            }}\n          />\n        );\n      }\n      visualizedField.push(<div key={i} style={{lineHeight: '0em'}}>{row}</div>);\n    }\n    return visualizedField;\n  };\n\n  // Create initial field when component mounts\n  useEffect(() => {\n    const initialField = createField(width, height);\n    visualizeField(initialField, width, height).then((visualized) => setField(visualized));\n  }, []);\n\n  useEffect(() => {\n    console.log(\"Processing changed: \",processing)\n  }, [processing]);\n\n  const handleWidthChange = (e) => {\n    setWidth(parseInt(e.target.value));\n  };\n\n  const handleHeightChange = (e) => {\n    setHeight(parseInt(e.target.value));\n  };\n\n  const handleNumBoxesChange = (e) => {\n    setNumBoxes(parseInt(e.target.value));\n  };\n\n  const handleMinSizeChange = (e) => {\n    setMinSize(parseInt(e.target.value));\n  };\n\n  const handleMaxSizeChange = (e) => {\n    setMaxSize(parseInt(e.target.value));\n  };\n\n  function getBoxOptions(minSize, maxSize, width, height) {\n    const options = new Set();\n    for (let i = minSize; i <= maxSize; i++) {\n      for (let j = minSize; j <= maxSize; j++) {\n        if (j <= height && i <= width) {\n          options.add([i, j, i * j].toString());\n          options.add([j, i, i * j].toString());\n        }\n      }\n    }\n\n    return Array.from(options).sort((a, b) => b[2] - a[2]);\n  }\n\n  function findSequenceOfLength(number, numbers, length, boxOptions) {\n    /*const nums = [];\n\n    for (let i = 0; i < boxOptions.length; i++) {\n      const size = boxOptions[i].split(\",\")[2];\n\n      if (numbers.includes(size)) {\n        nums.push(size);\n      }\n    }*/\n\n    const nums = numbers;\n\n    shuffle(nums);\n\n    let foundSequence = [];\n\n    function dfs(target, path) {\n      if (target === 0 && path.length === length) {\n        foundSequence = [...path];\n        return;\n      }\n\n      for (const num of nums) {\n        if (num <= target) {\n          path.push(num);\n          dfs(target - num, path);\n          path.pop();\n        }\n      }\n    }\n\n    dfs(number, []);\n\n    return foundSequence;\n  }\n\n  function findSequenceOfLengthBest(number, numbers, length, boxOptions) {\n    const nums = [];\n\n    for (let i = 0; i < boxOptions.length; i++) {\n      const size = boxOptions[i].split(\",\")[2];\n\n      if (numbers.includes(size)) {\n        nums.push(size);\n      }\n    }\n\n    shuffle(nums);\n\n    console.log(\"Nums: \",nums)\n\n    const dp = Array.from({ length: length + 1 }, () => Array(number + 1).fill(null));\n\n    try {\n      dp[0][0] = [];\n    } catch (e) {\n      return [];\n    }\n\n    for (let i = 1; i <= length; i++) {\n      for (let j = 0; j <= number; j++) {\n        for (const num of nums) {\n          if (j - num >= 0 && dp[i - 1][j - num] !== null) {\n            if (dp[i][j] === null || dp[i][j].length < i) {\n              const nextSequence = dp[i - 1][j - num].concat([num]);\n              if (!hasRepetition(nextSequence) || i >= length * 0.8) {\n                dp[i][j] = nextSequence;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return dp[length][number] !== null ? dp[length][number] : [];\n  }\n\n  function generateSequence(targetSum, arr, length) {\n    const result = [];\n\n    function dfs(currentSum, path) {\n      if (currentSum === targetSum && path.length === length) {\n        result.push([...path]);\n        return;\n      }\n\n      for (let i = 0; i < arr.length; i++) {\n        if (currentSum + arr[i] <= targetSum) {\n          path.push(arr[i]);\n          dfs(currentSum + arr[i], path);\n          path.pop();\n        }\n      }\n    }\n\n    dfs(0, []);\n\n    return result;\n  }\n\n  // Check if there are repetitions in the sequence\n  function hasRepetition(sequence) {\n    for (let i = 1; i < sequence.length; i++) {\n      if (sequence[i] === sequence[i - 1]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Helper function to shuffle an array\n  function shuffle(array) {\n    let currentIndex = array.length, randomIndex;\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n  }\n\n  function bentoIsFilledAppropriately(field, numBoxesSoFar, numBoxes) {\n    for (let row of field) {\n        for (let element of row) {\n            if (element === \"**\") {\n                return false;\n            }\n        }\n    }\n\n    console.log(\"Bento filled? \",numBoxesSoFar === numBoxes,numBoxesSoFar,numBoxes);\n\n    return numBoxesSoFar === numBoxes;\n  }\n\n  function storeForbiddenPath(forbiddenPathsDict, path, position, boxOption) {\n    if (forbiddenPathsDict[path]) {\n        if (!forbiddenPathsDict[path].includes(`${boxOption},${position}`)) {\n            forbiddenPathsDict[path].push(`${boxOption},${position}`);\n        }\n    } else {\n        forbiddenPathsDict[path] = [`${boxOption},${position}`];\n    }\n  }\n\n  function retrieveForbiddenPaths(forbiddenPathsDict, basePath) {\n      return forbiddenPathsDict[basePath] || [];\n  }\n\n  function getBoxOptionsFromSize(minSize, maxSize, size, width, height) {\n    const boxOptions = getBoxOptions(minSize, maxSize, width, height);\n    console.log(\"Box ops: \",boxOptions, \" size: \",size)\n    return boxOptions.filter(x => x.split(\",\")[2] === size);\n  }\n\n  function findCandidateIndices(field, boxOptionString) {\n    const boxOption = boxOptionString.split(\",\");\n    const boxWidth = parseInt(boxOption[0]);\n    const boxHeight = parseInt(boxOption[1]);\n\n    const indices = [];\n\n    const rows = field.length;\n    const cols = rows > 0 ? field[0].length : 0;\n\n    for (let i = 0; i < rows - boxHeight + 1; i++) {\n        for (let j = 0; j < cols - boxWidth + 1; j++) {\n            const subArr = field.slice(i, i + boxHeight).map(row => row.slice(j, j + boxWidth));\n            const isAllEmpty = subArr.every(row => row.every(elem => elem === \"**\"));\n            if (isAllEmpty) {\n                indices.push([i, j]);\n            }\n        }\n    }\n\n    return indices;\n  }\n\n  function augmentWithBox(field, index, boxOptionString, newChar) {\n    console.log(\"Augmentation time!!! \", index)\n    const fieldCopy = field.map(row => [...row]); // Deep copy of the field\n\n    const boxOption = boxOptionString.split(\",\")\n    const boxWidth = parseInt(boxOption[0]);\n    const boxHeight = parseInt(boxOption[1]);\n\n    const [x, y] = index;\n    for (let i = x; i < x + boxHeight; i++) {\n        for (let j = y; j < y + boxWidth; j++) {\n            console.log(\"Augmentation time!!!XXX\")\n            fieldCopy[i][j] = `*${newChar}`;\n        }\n    }\n\n    return fieldCopy;\n  }\n\n\n  // Handle generating a new field\n  const handleGenerateField = async () => {\n    await setProcessing(true);\n\n    let field = createField(width, height);\n\n    const boxOptions = getBoxOptions(minSize, maxSize, width, height);\n\n    const boxSizes = boxOptions.map((x) => x.split(\",\")[2]);\n\n    console.log(\"Box options: \",boxOptions);\n    console.log(\"Box sizes: \",boxSizes);\n\n    let theSequence = findSequenceOfLengthBest(width * height, boxSizes, numBoxes, boxOptions);\n    //let theSequence = generateSequence(width * height, boxSizes, numBoxes);\n    //shuffle(theSequence);\n    theSequence.sort((a, b) => b - a);\n\n    setSequence(theSequence.toString());\n\n    let prevPrevState = _.cloneDeep(field);\n    let prevState = _.cloneDeep(field);\n\n    let prevPrevNumBoxes = 0;\n    let prevNumBoxes = 0;\n    const forbiddenPathsDict = {};\n    let runNumber = 0;\n\n    let numBoxesSoFar = 0\n    let currentPath = []\n\n    if(theSequence.length > 0){\n      while (!bentoIsFilledAppropriately(field, numBoxesSoFar, numBoxes)) {\n        const relevantBoxSize = theSequence[numBoxesSoFar];\n        const relevantBoxOptions = getBoxOptionsFromSize(minSize, maxSize, relevantBoxSize, width, height);\n\n        let newBoxCanBeAdded = false;\n        let newBoxOption = null;\n        let newBoxIndex = null;\n\n        console.log(\"relevantBoxSize: \",relevantBoxSize);\n        console.log(\"relevantBoxOptions: \",relevantBoxOptions);\n\n        for (const boxOption of relevantBoxOptions) {\n            const candidateIndices = findCandidateIndices(field, boxOption);\n            //console.log(\"candidateIndices: \",candidateIndices);\n            const validCandidateIndices = [];\n\n            for (const candidateIndex of candidateIndices) {\n                const pathStr = `${candidateIndex},${boxOption}`;\n                if (!retrieveForbiddenPaths(forbiddenPathsDict, String(currentPath)).includes(pathStr)) {\n                    //console.log(\"ValidCandidate: \",candidateIndex,boxOption)\n                    validCandidateIndices.push(candidateIndex);\n                }\n            }\n\n            if (validCandidateIndices.length > 0) {\n                newBoxCanBeAdded = true;\n                newBoxOption = boxOption;\n                const randomIndex = Math.floor(Math.random() * validCandidateIndices.length)\n                console.log(\"vc length: \",validCandidateIndices.length)\n                console.log(\"randomIndex: \",randomIndex)\n                newBoxIndex = validCandidateIndices[randomIndex];\n                /*\n                if (validCandidateIndices.some(index => index[0] === 0 && index[1] === 0)) {\n                  newBoxIndex = [0, 0];\n                } else {\n                  newBoxIndex = validCandidateIndices[Math.floor(Math.random() * validCandidateIndices.length)];\n                }*/\n                break;\n            }\n        }\n\n        if (newBoxCanBeAdded) {\n            prevPrevNumBoxes = prevNumBoxes;\n            prevPrevState = _.cloneDeep(prevState);\n            prevNumBoxes = numBoxesSoFar;\n            prevState = _.cloneDeep(field);\n            const augmentedField = augmentWithBox(field, newBoxIndex, newBoxOption, numBoxesSoFar);\n            field = _.cloneDeep(augmentedField);\n            numBoxesSoFar++;\n\n            currentPath.push([newBoxOption, newBoxIndex]);\n        } else {\n            if (currentPath.length === 0) {\n                field = createField(width, height);\n\n                prevPrevNumBoxes = 0;\n                prevPrevState = _.cloneDeep(field);\n\n                prevNumBoxes = 0;\n                prevState = _.cloneDeep(field);\n\n                numBoxesSoFar = 0;\n            } else {\n                const [lastBoxPosition, lastBoxOption] = currentPath.pop();\n\n                storeForbiddenPath(forbiddenPathsDict, String(currentPath), lastBoxPosition, lastBoxOption);\n\n                if (currentPath.length === 0) {\n                    field = createField(width, height);\n\n                    prevPrevNumBoxes = 0;\n                    prevPrevState = _.cloneDeep(field);\n\n                    prevNumBoxes = 0;\n                    prevState = _.cloneDeep(field);\n\n                    numBoxesSoFar = 0;\n                } else {\n                    numBoxesSoFar = prevNumBoxes;\n                    field = _.cloneDeep(prevState);\n\n                    prevNumBoxes = prevPrevNumBoxes;\n                    prevState = _.cloneDeep(prevPrevState);\n                }\n            }\n        }\n\n        runNumber++;\n\n        if (runNumber % 1 === 0) {\n            console.log(runNumber, numBoxesSoFar);\n            console.log(\"path: \",currentPath);\n            console.log(\"numBoxesSoFar: \",numBoxesSoFar)\n        }\n\n        if (runNumber % 10 === 0) {\n            visualizeField(field, width, height).then((visualized) => setField(visualized));\n        }\n\n        if (runNumber % 10000 === 0) {\n            break;\n        }\n\n\n        if (prevNumBoxes === prevPrevNumBoxes && prevNumBoxes === numBoxesSoFar) {\n            theSequence = findSequenceOfLengthBest(width * height, boxOptions.map(x => x.split(\",\")[2]), numBoxes, boxOptions);\n            //let theSequence = generateSequence(width * height, boxSizes, numBoxes);\n            theSequence.sort((a, b) => b - a);\n\n            setSequence(theSequence.toString())\n\n            field = createField(width, height);\n\n            prevPrevNumBoxes = 0;\n            prevPrevState = _.cloneDeep(field);\n\n            prevNumBoxes = 0;\n            prevState = _.cloneDeep(field);\n\n            numBoxesSoFar = 0;\n            currentPath = [];\n        }\n      }\n\n      visualizeField(field, width, height).then((visualized) => setField(visualized));\n\n    }\n    setProcessing(false)\n  };\n\n  // Handle generating a new field\n  const handleGenerateFieldWithWorker = async () => {\n    await setProcessing(true);\n\n    const worker = new window.Worker(\"worker.js\"); // Create a new instance of the worker\n\n    // Send data to the worker\n    worker.postMessage({\n      width,\n      height,\n      numBoxes,\n      minSize,\n      maxSize,\n    });\n\n    worker.onmessage = function (e) {\n      // Handle the result sent back from the worker\n      const field = e.data;\n      // Update state or UI based on the result\n\n      console.log(\"Message!!!: \",field)\n\n      if(!field){\n        setError(true)\n      }else{\n        setError(false)\n        visualizeField(field, width, height).then((visualized) => setField(visualized));\n      }\n\n      setProcessing(false); // Set processing state to false after computation\n    };\n  };\n\n  return (\n    <div className=\"app\">\n\n      <div className=\"heading\">\n        <h3> 弁当屋 🍱 </h3> \n      </div>\n\n      <div className=\"inputs\">\n        {/* Four Number Input Fields */}\n        <div>\n          <label htmlFor=\"width\">Width:</label>\n          <br />\n          <input type=\"number\" id=\"width\" placeholder={width} value={width} onChange={handleWidthChange} min=\"2\" />\n        </div>\n        <div>\n          <label htmlFor=\"height\">Height:</label>\n          <br />\n          <input type=\"number\" id=\"height\" placeholder={height} value={height} onChange={handleHeightChange} min=\"2\"/>\n        </div>\n        <div>\n          <label htmlFor=\"input3\">Num Boxes:</label>\n          <br />\n          <input type=\"number\" id=\"input3\" placeholder={numBoxes} value={numBoxes} onChange={handleNumBoxesChange} min=\"1\"/>\n        </div>\n        <div>\n          <label htmlFor=\"input4\">Min Size:</label>\n          <br />\n          <input type=\"number\" id=\"input4\" placeholder={minSize} value={minSize} onChange={handleMinSizeChange} min=\"1\"/>\n        </div>\n        <div>\n          <label htmlFor=\"input5\">Max Size:</label>\n          <br />\n          <input type=\"number\" id=\"input5\" placeholder={maxSize} value={maxSize} onChange={handleMaxSizeChange} min=\"1\"/>\n        </div>\n\n        <button onClick={handleGenerateFieldWithWorker}> Generate </button>\n      </div>\n\n      <div className=\"bentoArea\">\n        {processing && \n          (<div>\n            <ColorRing\n              visible={processing}\n              height=\"80\"\n              width=\"80\"\n              ariaLabel=\"blocks-loading\"\n              wrapperStyle={{}}\n              wrapperClass=\"blocks-wrapper\"\n              colors={['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']}\n            />\n            <p> Please wait. </p>\n          </div>)}\n        <br/>\n        {!processing && error && <p>Invalid num of boxes</p>}\n        <br/>\n        <br/>\n        <br/>\n        {!processing && !error && field}\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}