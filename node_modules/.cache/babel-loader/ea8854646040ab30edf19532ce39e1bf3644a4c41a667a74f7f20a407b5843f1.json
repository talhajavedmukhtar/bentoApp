{"ast":null,"code":"var _jsxFileName = \"/Users/Talha/repos/steed/bento/bento-app/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const _ = require('lodash');\n  const [width, setWidth] = useState(8);\n  const [height, setHeight] = useState(4);\n  const [numBoxes, setNumBoxes] = useState(8);\n  const [minSize, setMinSize] = useState(1);\n  const [maxSize, setMaxSize] = useState(1);\n  const [sequence, setSequence] = useState([]);\n  const [field, setField] = useState([]);\n  const createField = (width, height) => {\n    const newField = Array.from({\n      length: height\n    }, () => Array.from({\n      length: width\n    }, () => '*73'));\n    return newField;\n  };\n\n  // Function to convert a string to a color\n  const stringToColor = async string => {\n    const hashBuffer = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(string));\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n    const r = parseInt(hashHex.substring(0, 6), 16) % 256;\n    const g = parseInt(hashHex.substring(6, 12), 16) % 256;\n    const b = parseInt(hashHex.substring(12, 18), 16) % 256;\n    return `rgb(${r}, ${g}, ${b})`;\n  };\n\n  // Function to visualize the field\n  const visualizeField = async (field, w, h) => {\n    const size = 10 / (w > h ? w : 2 * h);\n    const boxSize = `${size}em`;\n    console.log(\"Box size: \", boxSize);\n    const visualizedField = [];\n    for (let i = 0; i < field.length; i++) {\n      const row = [];\n      for (let j = 0; j < field[0].length; j++) {\n        const color = field[i][j] === '**' ? 'black' : await stringToColor(field[i][j]);\n        row.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: boxSize,\n            height: boxSize,\n            backgroundColor: color,\n            padding: boxSize,\n            marginRight: '0em',\n            border: '1px solid black',\n            display: 'inline-block'\n          }\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this));\n      }\n      visualizedField.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          lineHeight: '0em'\n        },\n        children: row\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 28\n      }, this));\n    }\n    return visualizedField;\n  };\n\n  // Create initial field when component mounts\n  useEffect(() => {\n    const initialField = createField(width, height);\n    visualizeField(initialField, width, height).then(visualized => setField(visualized));\n  }, []);\n  const handleWidthChange = e => {\n    setWidth(parseInt(e.target.value));\n  };\n  const handleHeightChange = e => {\n    setHeight(parseInt(e.target.value));\n  };\n  const handleNumBoxesChange = e => {\n    setNumBoxes(parseInt(e.target.value));\n  };\n  const handleMinSizeChange = e => {\n    setMinSize(parseInt(e.target.value));\n  };\n  const handleMaxSizeChange = e => {\n    setMaxSize(parseInt(e.target.value));\n  };\n  function getBoxOptions(minSize, maxSize, width, height) {\n    const options = new Set();\n    for (let i = minSize; i <= maxSize; i++) {\n      for (let j = minSize; j <= maxSize; j++) {\n        if (j <= height && i <= width) {\n          options.add([i, j, i * j]);\n          options.add([j, i, i * j]);\n        }\n      }\n    }\n    return Array.from(options).sort((a, b) => b[2] - a[2]);\n  }\n  function findSequenceOfLengthBest(number, nums, length) {\n    shuffle(nums);\n    const dp = Array.from({\n      length: length + 1\n    }, () => Array(number + 1).fill(null));\n    try {\n      dp[0][0] = [];\n    } catch (e) {\n      return [];\n    }\n    for (let i = 1; i <= length; i++) {\n      for (let j = 0; j <= number; j++) {\n        for (const num of nums) {\n          if (j - num >= 0 && dp[i - 1][j - num] !== null) {\n            if (dp[i][j] === null || dp[i][j].length < i) {\n              dp[i][j] = dp[i - 1][j - num].concat([num]);\n            }\n          }\n        }\n      }\n    }\n    return dp[length][number] !== null ? dp[length][number] : [];\n  }\n\n  // Helper function to shuffle an array\n  function shuffle(array) {\n    let currentIndex = array.length,\n      randomIndex;\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n  }\n  function bentoIsFilledAppropriately(field, numBoxesSoFar, numBoxes) {\n    for (let row of field) {\n      for (let element of row) {\n        if (element === \"**\") {\n          return false;\n        }\n      }\n    }\n    return numBoxesSoFar === numBoxes;\n  }\n  function storeForbiddenPath(forbiddenPathsDict, path, position, boxOption) {\n    if (forbiddenPathsDict[path]) {\n      if (!forbiddenPathsDict[path].includes(`${boxOption},${position}`)) {\n        forbiddenPathsDict[path].push(`${boxOption},${position}`);\n      }\n    } else {\n      forbiddenPathsDict[path] = [`${boxOption},${position}`];\n    }\n  }\n  function retrieveForbiddenPaths(forbiddenPathsDict, basePath) {\n    return forbiddenPathsDict[basePath] || [];\n  }\n  function getBoxOptionsFromSize(minSize, maxSize, size) {\n    const boxOptions = getBoxOptions(minSize, maxSize);\n    return boxOptions.filter(x => x[2] === size);\n  }\n  function findCandidateIndices(field, boxOption) {\n    const boxWidth = boxOption[0];\n    const boxHeight = boxOption[1];\n    const indices = [];\n    const rows = field.length;\n    const cols = rows > 0 ? field[0].length : 0;\n    for (let i = 0; i < rows - boxHeight + 1; i++) {\n      for (let j = 0; j < cols - boxWidth + 1; j++) {\n        const subArr = field.slice(i, i + boxHeight).map(row => row.slice(j, j + boxWidth));\n        const isAllEmpty = subArr.every(row => row.every(elem => elem === \"**\"));\n        if (isAllEmpty) {\n          indices.push([i, j]);\n        }\n      }\n    }\n    return indices;\n  }\n  function augmentWithBox(field, index, boxOption, newChar) {\n    const fieldCopy = field.map(row => [...row]); // Deep copy of the field\n\n    const boxWidth = boxOption[0];\n    const boxHeight = boxOption[1];\n    const [x, y] = index;\n    for (let i = x; i < x + boxHeight; i++) {\n      for (let j = y; j < y + boxWidth; j++) {\n        fieldCopy[i][j] = `*${newChar}`;\n      }\n    }\n    return fieldCopy;\n  }\n\n  // Handle generating a new field\n  const handleGenerateField = () => {\n    const newField = createField(width, height);\n    const boxOptions = getBoxOptions(minSize, maxSize, width, height);\n    const boxSizes = boxOptions.map(x => x[2]);\n    let theSequence = findSequenceOfLengthBest(width * height, boxSizes, numBoxes);\n    theSequence.sort((a, b) => b - a);\n    setSequence(theSequence);\n    let prevPrevState = _.cloneDeep(field);\n    let prevState = _.cloneDeep(field);\n    let prevPrevNumBoxes = 0;\n    let prevNumBoxes = 0;\n    const forbiddenPathsDict = {};\n    let runNumber = 0;\n    let numBoxesSoFar = 0;\n    let currentPath = [];\n    while (!bentoIsFilledAppropriately(field, numBoxesSoFar)) {\n      const relevantBoxSize = theSequence[numBoxesSoFar];\n      const relevantBoxOptions = getBoxOptionsFromSize(minSize, maxSize, relevantBoxSize);\n      let newBoxCanBeAdded = false;\n      let newBoxOption = null;\n      let newBoxIndex = null;\n      for (const boxOption of relevantBoxOptions) {\n        const candidateIndices = findCandidateIndices(field, boxOption);\n        const validCandidateIndices = [];\n        for (const candidateIndex of candidateIndices) {\n          const pathStr = `${candidateIndex},${boxOption}`;\n          if (!retrieveForbiddenPaths(forbiddenPathsDict, String(currentPath)).includes(pathStr)) {\n            validCandidateIndices.push(candidateIndex);\n          }\n        }\n        if (validCandidateIndices.length > 0) {\n          newBoxCanBeAdded = true;\n          newBoxOption = boxOption;\n          newBoxIndex = validCandidateIndices.includes([0, 0]) ? [0, 0] : random.choice(validCandidateIndices);\n          break;\n        }\n      }\n      if (newBoxCanBeAdded) {\n        prevPrevNumBoxes = prevNumBoxes;\n        prevPrevState = _.cloneDeep(prevState);\n        prevNumBoxes = numBoxesSoFar;\n        prevState = _.cloneDeep(field);\n        const augmentedField = augmentWithBox(field, newBoxIndex, newBoxOption, numBoxesSoFar);\n        numBoxesSoFar++;\n        justPopped = false;\n        currentPath.push([newBoxOption, newBoxIndex]);\n      } else {\n        if (currentPath.length === 0) {\n          field = createField(width, height);\n          prevPrevNumBoxes = 0;\n          prevPrevState = _.cloneDeep(field);\n          prevNumBoxes = 0;\n          prevState = _.cloneDeep(field);\n          numBoxesSoFar = 0;\n          justPopped = false;\n        } else {\n          const [lastBoxPosition, lastBoxOption] = currentPath.pop();\n          storeForbiddenPath(forbiddenPathsDict, String(currentPath), lastBoxPosition, lastBoxOption);\n          if (currentPath.length === 0) {\n            field = createField(width, height);\n            prevPrevNumBoxes = 0;\n            prevPrevState = _.cloneDeep(field);\n            prevNumBoxes = 0;\n            prevState = _.cloneDeep(field);\n            numBoxesSoFar = 0;\n          } else {\n            numBoxesSoFar = prevNumBoxes;\n            field = _.cloneDeep(prevState);\n            prevNumBoxes = prevPrevNumBoxes;\n            prevState = _.cloneDeep(prevPrevState);\n            justPopped = true;\n          }\n        }\n      }\n      runNumber++;\n      if (runNumber % 500 === 0) {\n        console.log(runNumber, numBoxesSoFar);\n      }\n      if (prevNumBoxes === prevPrevNumBoxes && prevNumBoxes === numBoxesSoFar) {\n        theSequence = findSequenceOfLengthBest(width * height, boxOptions.map(x => x[2]), numBoxes);\n        theSequence.sort((a, b) => b - a);\n        field = createField(width, height);\n        prevPrevNumBoxes = 0;\n        prevPrevState = _.cloneDeep(field);\n        prevNumBoxes = 0;\n        prevState = _.cloneDeep(field);\n        numBoxesSoFar = 0;\n        currentPath = [];\n      }\n    }\n    visualizeField(newField, width, height).then(visualized => setField(visualized));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"heading\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" \\u5F01\\u5F53\\u5C4B \\uD83C\\uDF71 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputs\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"width\",\n          children: \"Width:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"width\",\n          placeholder: width,\n          value: width,\n          onChange: handleWidthChange,\n          min: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"height\",\n          children: \"Height:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"height\",\n          placeholder: height,\n          value: height,\n          onChange: handleHeightChange,\n          min: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"input3\",\n          children: \"Num Boxes:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"input3\",\n          placeholder: numBoxes,\n          value: numBoxes,\n          onChange: handleNumBoxesChange,\n          min: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"input4\",\n          children: \"Min Size:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"input4\",\n          placeholder: minSize,\n          value: minSize,\n          onChange: handleMinSizeChange,\n          min: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"input5\",\n          children: \"Max Size:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"input5\",\n          placeholder: maxSize,\n          value: maxSize,\n          onChange: handleMaxSizeChange,\n          min: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGenerateField,\n        children: \" Generate \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bentoArea\",\n      children: [sequence, field]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 343,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+zba2WdMnFTazdzD4sv82GE3Bf8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","_","require","width","setWidth","height","setHeight","numBoxes","setNumBoxes","minSize","setMinSize","maxSize","setMaxSize","sequence","setSequence","field","setField","createField","newField","Array","from","length","stringToColor","string","hashBuffer","crypto","subtle","digest","TextEncoder","encode","hashArray","Uint8Array","hashHex","map","b","toString","padStart","join","r","parseInt","substring","g","visualizeField","w","h","size","boxSize","console","log","visualizedField","i","row","j","color","push","style","backgroundColor","padding","marginRight","border","display","fileName","_jsxFileName","lineNumber","columnNumber","lineHeight","children","initialField","then","visualized","handleWidthChange","e","target","value","handleHeightChange","handleNumBoxesChange","handleMinSizeChange","handleMaxSizeChange","getBoxOptions","options","Set","add","sort","a","findSequenceOfLengthBest","number","nums","shuffle","dp","fill","num","concat","array","currentIndex","randomIndex","Math","floor","random","bentoIsFilledAppropriately","numBoxesSoFar","element","storeForbiddenPath","forbiddenPathsDict","path","position","boxOption","includes","retrieveForbiddenPaths","basePath","getBoxOptionsFromSize","boxOptions","filter","x","findCandidateIndices","boxWidth","boxHeight","indices","rows","cols","subArr","slice","isAllEmpty","every","elem","augmentWithBox","index","newChar","fieldCopy","y","handleGenerateField","boxSizes","theSequence","prevPrevState","cloneDeep","prevState","prevPrevNumBoxes","prevNumBoxes","runNumber","currentPath","relevantBoxSize","relevantBoxOptions","newBoxCanBeAdded","newBoxOption","newBoxIndex","candidateIndices","validCandidateIndices","candidateIndex","pathStr","String","choice","augmentedField","justPopped","lastBoxPosition","lastBoxOption","pop","className","htmlFor","type","id","placeholder","onChange","min","onClick","_c","$RefreshReg$"],"sources":["/Users/Talha/repos/steed/bento/bento-app/src/App.jsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css'; \n\nfunction App() {\n  const _ = require('lodash');\n\n  const [width, setWidth] = useState(8)\n  const [height, setHeight] = useState(4)\n  const [numBoxes, setNumBoxes] = useState(8)\n  const [minSize, setMinSize] = useState(1)\n  const [maxSize, setMaxSize] = useState(1)\n\n  const [sequence, setSequence] = useState([])\n  const [field, setField] = useState([]);\n\n  const createField = (width, height) => {\n    const newField = Array.from({ length: height }, () =>\n      Array.from({ length: width }, () => '*73')\n    );\n    return newField;\n  };\n\n  // Function to convert a string to a color\n  const stringToColor = async (string) => {\n    const hashBuffer = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(string));\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray.map((b) => b.toString(16).padStart(2, '0')).join('');\n    const r = parseInt(hashHex.substring(0, 6), 16) % 256;\n    const g = parseInt(hashHex.substring(6, 12), 16) % 256;\n    const b = parseInt(hashHex.substring(12, 18), 16) % 256;\n    return `rgb(${r}, ${g}, ${b})`;\n  };\n\n  // Function to visualize the field\n  const visualizeField = async (field,w,h) => {\n    const size = 10 / (w > h ? w : 2*h);\n\n    const boxSize = `${size}em`\n\n    console.log(\"Box size: \",boxSize)\n\n    const visualizedField = [];\n    for (let i = 0; i < field.length; i++) {\n      const row = [];\n      for (let j = 0; j < field[0].length; j++) {\n        const color = field[i][j] === '**' ? 'black' : await stringToColor(field[i][j]);\n        row.push(\n          <div\n            key={`${i}-${j}`}\n            style={{\n              width: boxSize,\n              height: boxSize,\n              backgroundColor: color,\n              padding: boxSize,\n              marginRight: '0em',\n              border: '1px solid black',\n              display: 'inline-block',\n            }}\n          />\n        );\n      }\n      visualizedField.push(<div key={i} style={{lineHeight: '0em'}}>{row}</div>);\n    }\n    return visualizedField;\n  };\n\n  // Create initial field when component mounts\n  useEffect(() => {\n    const initialField = createField(width, height);\n    visualizeField(initialField, width, height).then((visualized) => setField(visualized));\n  }, []);\n\n  const handleWidthChange = (e) => {\n    setWidth(parseInt(e.target.value));\n  };\n\n  const handleHeightChange = (e) => {\n    setHeight(parseInt(e.target.value));\n  };\n\n  const handleNumBoxesChange = (e) => {\n    setNumBoxes(parseInt(e.target.value));\n  };\n\n  const handleMinSizeChange = (e) => {\n    setMinSize(parseInt(e.target.value));\n  };\n\n  const handleMaxSizeChange = (e) => {\n    setMaxSize(parseInt(e.target.value));\n  };\n\n  function getBoxOptions(minSize, maxSize, width, height) {\n    const options = new Set();\n    for (let i = minSize; i <= maxSize; i++) {\n      for (let j = minSize; j <= maxSize; j++) {\n        if (j <= height && i <= width) {\n          options.add([i, j, i * j]);\n          options.add([j, i, i * j]);\n        }\n      }\n    }\n\n    return Array.from(options).sort((a, b) => b[2] - a[2]);\n  }\n\n  function findSequenceOfLengthBest(number, nums, length) {\n    shuffle(nums);\n\n    const dp = Array.from({ length: length + 1 }, () => Array(number + 1).fill(null));\n\n    try {\n      dp[0][0] = [];\n    } catch (e) {\n      return [];\n    }\n\n    for (let i = 1; i <= length; i++) {\n      for (let j = 0; j <= number; j++) {\n        for (const num of nums) {\n          if (j - num >= 0 && dp[i - 1][j - num] !== null) {\n            if (dp[i][j] === null || dp[i][j].length < i) {\n              dp[i][j] = dp[i - 1][j - num].concat([num]);\n            }\n          }\n        }\n      }\n    }\n\n    return dp[length][number] !== null ? dp[length][number] : [];\n  }\n\n  // Helper function to shuffle an array\n  function shuffle(array) {\n    let currentIndex = array.length, randomIndex;\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n  }\n\n  function bentoIsFilledAppropriately(field, numBoxesSoFar, numBoxes) {\n    for (let row of field) {\n        for (let element of row) {\n            if (element === \"**\") {\n                return false;\n            }\n        }\n    }\n\n    return numBoxesSoFar === numBoxes;\n  }\n\n  function storeForbiddenPath(forbiddenPathsDict, path, position, boxOption) {\n    if (forbiddenPathsDict[path]) {\n        if (!forbiddenPathsDict[path].includes(`${boxOption},${position}`)) {\n            forbiddenPathsDict[path].push(`${boxOption},${position}`);\n        }\n    } else {\n        forbiddenPathsDict[path] = [`${boxOption},${position}`];\n    }\n  }\n\n  function retrieveForbiddenPaths(forbiddenPathsDict, basePath) {\n      return forbiddenPathsDict[basePath] || [];\n  }\n\n  function getBoxOptionsFromSize(minSize, maxSize, size) {\n    const boxOptions = getBoxOptions(minSize, maxSize);\n    return boxOptions.filter(x => x[2] === size);\n  }\n\n  function findCandidateIndices(field, boxOption) {\n    const boxWidth = boxOption[0];\n    const boxHeight = boxOption[1];\n\n    const indices = [];\n\n    const rows = field.length;\n    const cols = rows > 0 ? field[0].length : 0;\n\n    for (let i = 0; i < rows - boxHeight + 1; i++) {\n        for (let j = 0; j < cols - boxWidth + 1; j++) {\n            const subArr = field.slice(i, i + boxHeight).map(row => row.slice(j, j + boxWidth));\n            const isAllEmpty = subArr.every(row => row.every(elem => elem === \"**\"));\n            if (isAllEmpty) {\n                indices.push([i, j]);\n            }\n        }\n    }\n\n    return indices;\n  }\n\n  function augmentWithBox(field, index, boxOption, newChar) {\n    const fieldCopy = field.map(row => [...row]); // Deep copy of the field\n\n    const boxWidth = boxOption[0];\n    const boxHeight = boxOption[1];\n\n    const [x, y] = index;\n    for (let i = x; i < x + boxHeight; i++) {\n        for (let j = y; j < y + boxWidth; j++) {\n            fieldCopy[i][j] = `*${newChar}`;\n        }\n    }\n\n    return fieldCopy;\n  }\n\n\n  // Handle generating a new field\n  const handleGenerateField = () => {\n    const newField = createField(width, height);\n\n    const boxOptions = getBoxOptions(minSize, maxSize, width, height);\n\n    const boxSizes = boxOptions.map((x) => x[2]);\n\n    let theSequence = findSequenceOfLengthBest(width * height, boxSizes, numBoxes);\n    theSequence.sort((a, b) => b - a);\n\n    setSequence(theSequence);\n\n    let prevPrevState = _.cloneDeep(field);\n    let prevState = _.cloneDeep(field);\n\n    let prevPrevNumBoxes = 0;\n    let prevNumBoxes = 0;\n    const forbiddenPathsDict = {};\n    let runNumber = 0;\n\n    let numBoxesSoFar = 0\n    let currentPath = []\n\n    while (!bentoIsFilledAppropriately(field, numBoxesSoFar)) {\n      const relevantBoxSize = theSequence[numBoxesSoFar];\n      const relevantBoxOptions = getBoxOptionsFromSize(minSize, maxSize, relevantBoxSize);\n\n      let newBoxCanBeAdded = false;\n      let newBoxOption = null;\n      let newBoxIndex = null;\n\n      for (const boxOption of relevantBoxOptions) {\n          const candidateIndices = findCandidateIndices(field, boxOption);\n          const validCandidateIndices = [];\n\n          for (const candidateIndex of candidateIndices) {\n              const pathStr = `${candidateIndex},${boxOption}`;\n              if (!retrieveForbiddenPaths(forbiddenPathsDict, String(currentPath)).includes(pathStr)) {\n                  validCandidateIndices.push(candidateIndex);\n              }\n          }\n\n          if (validCandidateIndices.length > 0) {\n              newBoxCanBeAdded = true;\n              newBoxOption = boxOption;\n              newBoxIndex = validCandidateIndices.includes([0, 0]) ? [0, 0] : random.choice(validCandidateIndices);\n              break;\n          }\n      }\n\n      if (newBoxCanBeAdded) {\n          prevPrevNumBoxes = prevNumBoxes;\n          prevPrevState = _.cloneDeep(prevState);\n          prevNumBoxes = numBoxesSoFar;\n          prevState = _.cloneDeep(field);\n          const augmentedField = augmentWithBox(field, newBoxIndex, newBoxOption, numBoxesSoFar);\n          numBoxesSoFar++;\n          justPopped = false;\n\n          currentPath.push([newBoxOption, newBoxIndex]);\n      } else {\n          if (currentPath.length === 0) {\n              field = createField(width, height);\n\n              prevPrevNumBoxes = 0;\n              prevPrevState = _.cloneDeep(field);\n\n              prevNumBoxes = 0;\n              prevState = _.cloneDeep(field);\n\n              numBoxesSoFar = 0;\n              justPopped = false;\n          } else {\n              const [lastBoxPosition, lastBoxOption] = currentPath.pop();\n\n              storeForbiddenPath(forbiddenPathsDict, String(currentPath), lastBoxPosition, lastBoxOption);\n\n              if (currentPath.length === 0) {\n                  field = createField(width, height);\n\n                  prevPrevNumBoxes = 0;\n                  prevPrevState = _.cloneDeep(field);\n\n                  prevNumBoxes = 0;\n                  prevState = _.cloneDeep(field);\n\n                  numBoxesSoFar = 0;\n              } else {\n                  numBoxesSoFar = prevNumBoxes;\n                  field = _.cloneDeep(prevState);\n\n                  prevNumBoxes = prevPrevNumBoxes;\n                  prevState = _.cloneDeep(prevPrevState);\n\n                  justPopped = true;\n              }\n          }\n      }\n\n      runNumber++;\n\n      if (runNumber % 500 === 0) {\n          console.log(runNumber, numBoxesSoFar);\n      }\n\n      if (prevNumBoxes === prevPrevNumBoxes && prevNumBoxes === numBoxesSoFar) {\n          theSequence = findSequenceOfLengthBest(width * height, boxOptions.map(x => x[2]), numBoxes);\n          theSequence.sort((a, b) => b - a);\n\n          field = createField(width, height);\n\n          prevPrevNumBoxes = 0;\n          prevPrevState = _.cloneDeep(field);\n\n          prevNumBoxes = 0;\n          prevState = _.cloneDeep(field);\n\n          numBoxesSoFar = 0;\n          currentPath = [];\n      }\n    }\n\n    visualizeField(newField, width, height).then((visualized) => setField(visualized));\n  };\n\n\n\n  return (\n    <div className=\"app\">\n\n      <div className=\"heading\">\n        <h3> 弁当屋 🍱 </h3> \n      </div>\n\n      <div className=\"inputs\">\n        {/* Four Number Input Fields */}\n        <div>\n          <label htmlFor=\"width\">Width:</label>\n          <br />\n          <input type=\"number\" id=\"width\" placeholder={width} value={width} onChange={handleWidthChange} min=\"2\" />\n        </div>\n        <div>\n          <label htmlFor=\"height\">Height:</label>\n          <br />\n          <input type=\"number\" id=\"height\" placeholder={height} value={height} onChange={handleHeightChange} min=\"2\"/>\n        </div>\n        <div>\n          <label htmlFor=\"input3\">Num Boxes:</label>\n          <br />\n          <input type=\"number\" id=\"input3\" placeholder={numBoxes} value={numBoxes} onChange={handleNumBoxesChange} min=\"1\"/>\n        </div>\n        <div>\n          <label htmlFor=\"input4\">Min Size:</label>\n          <br />\n          <input type=\"number\" id=\"input4\" placeholder={minSize} value={minSize} onChange={handleMinSizeChange} min=\"1\"/>\n        </div>\n        <div>\n          <label htmlFor=\"input5\">Max Size:</label>\n          <br />\n          <input type=\"number\" id=\"input5\" placeholder={maxSize} value={maxSize} onChange={handleMaxSizeChange} min=\"1\"/>\n        </div>\n\n        <button onClick={handleGenerateField}> Generate </button>\n      </div>\n\n      <div className=\"bentoArea\">\n        {sequence}\n        {field}\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}