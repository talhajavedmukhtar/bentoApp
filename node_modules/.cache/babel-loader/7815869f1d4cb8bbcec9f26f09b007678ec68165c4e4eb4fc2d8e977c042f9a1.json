{"ast":null,"code":"var _jsxFileName = \"/Users/Talha/repos/steed/bento/bento-app/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const _ = require('lodash');\n  const firebaseConfig = {\n    apiKey: \"AIzaSyDs7OhdjYAaLsZeDBEXyxi3hGxfIVEmnac\",\n    authDomain: \"bento-app-b64c5.firebaseapp.com\",\n    projectId: \"bento-app-b64c5\",\n    storageBucket: \"bento-app-b64c5.appspot.com\",\n    messagingSenderId: \"738546689884\",\n    appId: \"1:738546689884:web:1dbe62feaa2770b7d48399\",\n    measurementId: \"G-4N1P5BG8ZF\"\n  };\n\n  // Initialize Firebase\n  const app = initializeApp(firebaseConfig);\n  const analytics = getAnalytics(app);\n  const [width, setWidth] = useState(8);\n  const [height, setHeight] = useState(4);\n  const [numBoxes, setNumBoxes] = useState(8);\n  const [minSize, setMinSize] = useState(2);\n  const [maxSize, setMaxSize] = useState(4);\n  const [sequence, setSequence] = useState([]);\n  const [field, setField] = useState([]);\n  const [processing, setProcessing] = useState(false);\n  const createField = (width, height) => {\n    const newField = Array.from({\n      length: height\n    }, () => Array.from({\n      length: width\n    }, () => '**'));\n    return newField;\n  };\n\n  // Function to convert a string to a color\n  const stringToColor = async string => {\n    const hashBuffer = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(string));\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n\n    // Generate warm colors by focusing on the warm spectrum\n    const r = parseInt(hashHex.substring(0, 6), 16) % 256; // Red component\n    const g = parseInt(hashHex.substring(6, 12), 16) % 200; // Green component\n    const b = parseInt(hashHex.substring(12, 18), 16) % 100; // Blue component\n\n    return `rgb(${r}, ${g}, ${b})`;\n  };\n\n  // Function to visualize the field\n  const visualizeField = async (field, w, h) => {\n    const size = 10 / (w > h ? w : 2 * h);\n    const boxSize = `${size}em`;\n    const visualizedField = [];\n    for (let i = 0; i < field.length; i++) {\n      const row = [];\n      for (let j = 0; j < field[0].length; j++) {\n        const color = field[i][j] === '**' ? '#FFFCF0' : await stringToColor(field[i][j]);\n        row.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: boxSize,\n            height: boxSize,\n            backgroundColor: color,\n            padding: boxSize,\n            marginRight: '0em',\n            border: '1px solid #282726',\n            display: 'inline-block'\n          }\n        }, `${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this));\n      }\n      visualizedField.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          lineHeight: '0em'\n        },\n        children: row\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 28\n      }, this));\n    }\n    return visualizedField;\n  };\n\n  // Create initial field when component mounts\n  useEffect(() => {\n    const initialField = createField(width, height);\n    visualizeField(initialField, width, height).then(visualized => setField(visualized));\n  }, []);\n  useEffect(() => {\n    console.log(\"Processing changed: \", processing);\n  }, [processing]);\n  const handleWidthChange = e => {\n    setWidth(parseInt(e.target.value));\n  };\n  const handleHeightChange = e => {\n    setHeight(parseInt(e.target.value));\n  };\n  const handleNumBoxesChange = e => {\n    setNumBoxes(parseInt(e.target.value));\n  };\n  const handleMinSizeChange = e => {\n    setMinSize(parseInt(e.target.value));\n  };\n  const handleMaxSizeChange = e => {\n    setMaxSize(parseInt(e.target.value));\n  };\n  function getBoxOptions(minSize, maxSize, width, height) {\n    const options = new Set();\n    for (let i = minSize; i <= maxSize; i++) {\n      for (let j = minSize; j <= maxSize; j++) {\n        if (j <= height && i <= width) {\n          options.add([i, j, i * j].toString());\n          options.add([j, i, i * j].toString());\n        }\n      }\n    }\n    return Array.from(options).sort((a, b) => b[2] - a[2]);\n  }\n  function findSequenceOfLengthBest(number, numbers, length, boxOptions) {\n    const nums = [];\n    for (let i = 0; i < boxOptions.length; i++) {\n      const size = boxOptions[i].split(\",\")[2];\n      if (numbers.includes(size)) {\n        nums.push(size);\n      }\n    }\n    shuffle(nums);\n    const dp = Array.from({\n      length: length + 1\n    }, () => Array(number + 1).fill(null));\n    try {\n      dp[0][0] = [];\n    } catch (e) {\n      return [];\n    }\n    for (let i = 1; i <= length; i++) {\n      for (let j = 0; j <= number; j++) {\n        for (const num of nums) {\n          if (j - num >= 0 && dp[i - 1][j - num] !== null) {\n            if (dp[i][j] === null || dp[i][j].length < i) {\n              const nextSequence = dp[i - 1][j - num].concat([num]);\n              if (!hasRepetition(nextSequence) || i >= length * 0.8) {\n                dp[i][j] = nextSequence;\n              }\n            }\n          }\n        }\n      }\n    }\n    return dp[length][number] !== null ? dp[length][number] : [];\n  }\n\n  // Check if there are repetitions in the sequence\n  function hasRepetition(sequence) {\n    for (let i = 1; i < sequence.length; i++) {\n      if (sequence[i] === sequence[i - 1]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Helper function to shuffle an array\n  function shuffle(array) {\n    let currentIndex = array.length,\n      randomIndex;\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n  }\n  function bentoIsFilledAppropriately(field, numBoxesSoFar, numBoxes) {\n    for (let row of field) {\n      for (let element of row) {\n        if (element === \"**\") {\n          return false;\n        }\n      }\n    }\n    console.log(\"Bento filled? \", numBoxesSoFar === numBoxes, numBoxesSoFar, numBoxes);\n    return numBoxesSoFar === numBoxes;\n  }\n  function storeForbiddenPath(forbiddenPathsDict, path, position, boxOption) {\n    if (forbiddenPathsDict[path]) {\n      if (!forbiddenPathsDict[path].includes(`${boxOption},${position}`)) {\n        forbiddenPathsDict[path].push(`${boxOption},${position}`);\n      }\n    } else {\n      forbiddenPathsDict[path] = [`${boxOption},${position}`];\n    }\n  }\n  function retrieveForbiddenPaths(forbiddenPathsDict, basePath) {\n    return forbiddenPathsDict[basePath] || [];\n  }\n  function getBoxOptionsFromSize(minSize, maxSize, size, width, height) {\n    const boxOptions = getBoxOptions(minSize, maxSize, width, height);\n    console.log(\"Box ops: \", boxOptions, \" size: \", size);\n    return boxOptions.filter(x => x.split(\",\")[2] === size);\n  }\n  function findCandidateIndices(field, boxOptionString) {\n    const boxOption = boxOptionString.split(\",\");\n    const boxWidth = parseInt(boxOption[0]);\n    const boxHeight = parseInt(boxOption[1]);\n    const indices = [];\n    const rows = field.length;\n    const cols = rows > 0 ? field[0].length : 0;\n    for (let i = 0; i < rows - boxHeight + 1; i++) {\n      for (let j = 0; j < cols - boxWidth + 1; j++) {\n        const subArr = field.slice(i, i + boxHeight).map(row => row.slice(j, j + boxWidth));\n        const isAllEmpty = subArr.every(row => row.every(elem => elem === \"**\"));\n        if (isAllEmpty) {\n          indices.push([i, j]);\n        }\n      }\n    }\n    return indices;\n  }\n  function augmentWithBox(field, index, boxOptionString, newChar) {\n    console.log(\"Augmentation time!!! \", index);\n    const fieldCopy = field.map(row => [...row]); // Deep copy of the field\n\n    const boxOption = boxOptionString.split(\",\");\n    const boxWidth = parseInt(boxOption[0]);\n    const boxHeight = parseInt(boxOption[1]);\n    const [x, y] = index;\n    for (let i = x; i < x + boxHeight; i++) {\n      for (let j = y; j < y + boxWidth; j++) {\n        console.log(\"Augmentation time!!!XXX\");\n        fieldCopy[i][j] = `*${newChar}`;\n      }\n    }\n    return fieldCopy;\n  }\n\n  // Handle generating a new field\n  const handleGenerateField = async () => {\n    await setProcessing(true);\n    let field = createField(width, height);\n    const boxOptions = getBoxOptions(minSize, maxSize, width, height);\n    const boxSizes = boxOptions.map(x => x[2]);\n    let theSequence = findSequenceOfLengthBest(width * height, boxSizes, numBoxes, boxOptions);\n    theSequence.sort((a, b) => b - a);\n    setSequence(theSequence.toString());\n    let prevPrevState = _.cloneDeep(field);\n    let prevState = _.cloneDeep(field);\n    let prevPrevNumBoxes = 0;\n    let prevNumBoxes = 0;\n    const forbiddenPathsDict = {};\n    let runNumber = 0;\n    let numBoxesSoFar = 0;\n    let currentPath = [];\n    while (!bentoIsFilledAppropriately(field, numBoxesSoFar, numBoxes)) {\n      const relevantBoxSize = theSequence[numBoxesSoFar];\n      const relevantBoxOptions = getBoxOptionsFromSize(minSize, maxSize, relevantBoxSize, width, height);\n      let newBoxCanBeAdded = false;\n      let newBoxOption = null;\n      let newBoxIndex = null;\n      console.log(\"relevantBoxSize: \", relevantBoxSize);\n      console.log(\"relevantBoxOptions: \", relevantBoxOptions);\n      for (const boxOption of relevantBoxOptions) {\n        const candidateIndices = findCandidateIndices(field, boxOption);\n        console.log(\"candidateIndices: \", candidateIndices);\n        const validCandidateIndices = [];\n        for (const candidateIndex of candidateIndices) {\n          const pathStr = `${candidateIndex},${boxOption}`;\n          if (!retrieveForbiddenPaths(forbiddenPathsDict, String(currentPath)).includes(pathStr)) {\n            console.log(\"ValidCandidate: \", candidateIndex, boxOption);\n            validCandidateIndices.push(candidateIndex);\n          }\n        }\n        if (validCandidateIndices.length > 0) {\n          newBoxCanBeAdded = true;\n          newBoxOption = boxOption;\n          const randomIndex = Math.floor(Math.random() * validCandidateIndices.length);\n          console.log(\"randomIndex: \", randomIndex);\n          newBoxIndex = validCandidateIndices[randomIndex];\n          /*\n          if (validCandidateIndices.some(index => index[0] === 0 && index[1] === 0)) {\n            newBoxIndex = [0, 0];\n          } else {\n            newBoxIndex = validCandidateIndices[Math.floor(Math.random() * validCandidateIndices.length)];\n          }*/\n          break;\n        }\n      }\n      if (newBoxCanBeAdded) {\n        prevPrevNumBoxes = prevNumBoxes;\n        prevPrevState = _.cloneDeep(prevState);\n        prevNumBoxes = numBoxesSoFar;\n        prevState = _.cloneDeep(field);\n        const augmentedField = augmentWithBox(field, newBoxIndex, newBoxOption, numBoxesSoFar);\n        field = _.cloneDeep(augmentedField);\n        numBoxesSoFar++;\n        currentPath.push([newBoxOption, newBoxIndex]);\n      } else {\n        if (currentPath.length === 0) {\n          field = createField(width, height);\n          prevPrevNumBoxes = 0;\n          prevPrevState = _.cloneDeep(field);\n          prevNumBoxes = 0;\n          prevState = _.cloneDeep(field);\n          numBoxesSoFar = 0;\n        } else {\n          const [lastBoxPosition, lastBoxOption] = currentPath.pop();\n          storeForbiddenPath(forbiddenPathsDict, String(currentPath), lastBoxPosition, lastBoxOption);\n          if (currentPath.length === 0) {\n            field = createField(width, height);\n            prevPrevNumBoxes = 0;\n            prevPrevState = _.cloneDeep(field);\n            prevNumBoxes = 0;\n            prevState = _.cloneDeep(field);\n            numBoxesSoFar = 0;\n          } else {\n            numBoxesSoFar = prevNumBoxes;\n            field = _.cloneDeep(prevState);\n            prevNumBoxes = prevPrevNumBoxes;\n            prevState = _.cloneDeep(prevPrevState);\n          }\n        }\n      }\n      runNumber++;\n      if (runNumber % 1 === 0) {\n        console.log(runNumber, numBoxesSoFar);\n        console.log(\"path: \", currentPath);\n        console.log(\"numBoxesSoFar: \", numBoxesSoFar);\n      }\n      if (runNumber % 10 === 0) {\n        visualizeField(field, width, height).then(visualized => setField(visualized));\n      }\n      if (runNumber % 1000 === 0) {\n        break;\n      }\n      if (prevNumBoxes === prevPrevNumBoxes && prevNumBoxes === numBoxesSoFar) {\n        theSequence = findSequenceOfLengthBest(width * height, boxOptions.map(x => x[2]), numBoxes, boxOptions);\n        theSequence.sort((a, b) => b - a);\n        setSequence(theSequence.toString());\n        field = createField(width, height);\n        prevPrevNumBoxes = 0;\n        prevPrevState = _.cloneDeep(field);\n        prevNumBoxes = 0;\n        prevState = _.cloneDeep(field);\n        numBoxesSoFar = 0;\n        currentPath = [];\n      }\n    }\n    visualizeField(field, width, height).then(visualized => setField(visualized));\n    setProcessing(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"heading\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \" \\u5F01\\u5F53\\u5C4B \\uD83C\\uDF71 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputs\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"width\",\n          children: \"Width:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"width\",\n          placeholder: width,\n          value: width,\n          onChange: handleWidthChange,\n          min: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"height\",\n          children: \"Height:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"height\",\n          placeholder: height,\n          value: height,\n          onChange: handleHeightChange,\n          min: \"2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"input3\",\n          children: \"Num Boxes:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"input3\",\n          placeholder: numBoxes,\n          value: numBoxes,\n          onChange: handleNumBoxesChange,\n          min: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"input4\",\n          children: \"Min Size:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"input4\",\n          placeholder: minSize,\n          value: minSize,\n          onChange: handleMinSizeChange,\n          min: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"input5\",\n          children: \"Max Size:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"input5\",\n          placeholder: maxSize,\n          value: maxSize,\n          onChange: handleMaxSizeChange,\n          min: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGenerateField,\n        children: \" Generate \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bentoArea\",\n      children: [processing ? \"Please wait...\" : \"\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 9\n      }, this), sequence.length > 0 ? sequence : \"Invalid num of boxes\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 9\n      }, this), field]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 421,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xK86rUOx1WRzRL+ld2StfHe7oaQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","initializeApp","getAnalytics","jsxDEV","_jsxDEV","App","_s","_","require","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","width","setWidth","height","setHeight","numBoxes","setNumBoxes","minSize","setMinSize","maxSize","setMaxSize","sequence","setSequence","field","setField","processing","setProcessing","createField","newField","Array","from","length","stringToColor","string","hashBuffer","crypto","subtle","digest","TextEncoder","encode","hashArray","Uint8Array","hashHex","map","b","toString","padStart","join","r","parseInt","substring","g","visualizeField","w","h","size","boxSize","visualizedField","i","row","j","color","push","style","backgroundColor","padding","marginRight","border","display","fileName","_jsxFileName","lineNumber","columnNumber","lineHeight","children","initialField","then","visualized","console","log","handleWidthChange","e","target","value","handleHeightChange","handleNumBoxesChange","handleMinSizeChange","handleMaxSizeChange","getBoxOptions","options","Set","add","sort","a","findSequenceOfLengthBest","number","numbers","boxOptions","nums","split","includes","shuffle","dp","fill","num","nextSequence","concat","hasRepetition","array","currentIndex","randomIndex","Math","floor","random","bentoIsFilledAppropriately","numBoxesSoFar","element","storeForbiddenPath","forbiddenPathsDict","path","position","boxOption","retrieveForbiddenPaths","basePath","getBoxOptionsFromSize","filter","x","findCandidateIndices","boxOptionString","boxWidth","boxHeight","indices","rows","cols","subArr","slice","isAllEmpty","every","elem","augmentWithBox","index","newChar","fieldCopy","y","handleGenerateField","boxSizes","theSequence","prevPrevState","cloneDeep","prevState","prevPrevNumBoxes","prevNumBoxes","runNumber","currentPath","relevantBoxSize","relevantBoxOptions","newBoxCanBeAdded","newBoxOption","newBoxIndex","candidateIndices","validCandidateIndices","candidateIndex","pathStr","String","augmentedField","lastBoxPosition","lastBoxOption","pop","className","htmlFor","type","id","placeholder","onChange","min","onClick","_c","$RefreshReg$"],"sources":["/Users/Talha/repos/steed/bento/bento-app/src/App.jsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport './App.css'; \nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\n\nfunction App() {\n  const _ = require('lodash');\n\n  const firebaseConfig = {\n  apiKey: \"AIzaSyDs7OhdjYAaLsZeDBEXyxi3hGxfIVEmnac\",\n  authDomain: \"bento-app-b64c5.firebaseapp.com\",\n  projectId: \"bento-app-b64c5\",\n  storageBucket: \"bento-app-b64c5.appspot.com\",\n  messagingSenderId: \"738546689884\",\n  appId: \"1:738546689884:web:1dbe62feaa2770b7d48399\",\n  measurementId: \"G-4N1P5BG8ZF\"\n  };\n\n  // Initialize Firebase\n  const app = initializeApp(firebaseConfig);\n  const analytics = getAnalytics(app);\n\n  const [width, setWidth] = useState(8)\n  const [height, setHeight] = useState(4)\n  const [numBoxes, setNumBoxes] = useState(8)\n  const [minSize, setMinSize] = useState(2)\n  const [maxSize, setMaxSize] = useState(4)\n\n  const [sequence, setSequence] = useState([])\n  const [field, setField] = useState([]);\n  const [processing, setProcessing] = useState(false)\n\n  const createField = (width, height) => {\n    const newField = Array.from({ length: height }, () =>\n      Array.from({ length: width }, () => '**')\n    );\n    return newField;\n  };\n\n  // Function to convert a string to a color\n  const stringToColor = async (string) => {\n    const hashBuffer = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(string));\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray.map((b) => b.toString(16).padStart(2, '0')).join('');\n\n    // Generate warm colors by focusing on the warm spectrum\n    const r = parseInt(hashHex.substring(0, 6), 16) % 256; // Red component\n    const g = parseInt(hashHex.substring(6, 12), 16) % 200; // Green component\n    const b = parseInt(hashHex.substring(12, 18), 16) % 100; // Blue component\n\n    return `rgb(${r}, ${g}, ${b})`;\n  };\n\n  // Function to visualize the field\n  const visualizeField = async (field,w,h) => {\n    const size = 10 / (w > h ? w : 2*h);\n\n    const boxSize = `${size}em`\n\n    const visualizedField = [];\n    for (let i = 0; i < field.length; i++) {\n      const row = [];\n      for (let j = 0; j < field[0].length; j++) {\n        const color = field[i][j] === '**' ? '#FFFCF0' : await stringToColor(field[i][j]);\n        row.push(\n          <div\n            key={`${i}-${j}`}\n            style={{\n              width: boxSize,\n              height: boxSize,\n              backgroundColor: color,\n              padding: boxSize,\n              marginRight: '0em',\n              border: '1px solid #282726',\n              display: 'inline-block',\n            }}\n          />\n        );\n      }\n      visualizedField.push(<div key={i} style={{lineHeight: '0em'}}>{row}</div>);\n    }\n    return visualizedField;\n  };\n\n  // Create initial field when component mounts\n  useEffect(() => {\n    const initialField = createField(width, height);\n    visualizeField(initialField, width, height).then((visualized) => setField(visualized));\n  }, []);\n\n  useEffect(() => {\n    console.log(\"Processing changed: \",processing)\n  }, [processing]);\n\n  const handleWidthChange = (e) => {\n    setWidth(parseInt(e.target.value));\n  };\n\n  const handleHeightChange = (e) => {\n    setHeight(parseInt(e.target.value));\n  };\n\n  const handleNumBoxesChange = (e) => {\n    setNumBoxes(parseInt(e.target.value));\n  };\n\n  const handleMinSizeChange = (e) => {\n    setMinSize(parseInt(e.target.value));\n  };\n\n  const handleMaxSizeChange = (e) => {\n    setMaxSize(parseInt(e.target.value));\n  };\n\n  function getBoxOptions(minSize, maxSize, width, height) {\n    const options = new Set();\n    for (let i = minSize; i <= maxSize; i++) {\n      for (let j = minSize; j <= maxSize; j++) {\n        if (j <= height && i <= width) {\n          options.add([i, j, i * j].toString());\n          options.add([j, i, i * j].toString());\n        }\n      }\n    }\n\n    return Array.from(options).sort((a, b) => b[2] - a[2]);\n  }\n\n  function findSequenceOfLengthBest(number, numbers, length, boxOptions) {\n    const nums = [];\n\n    for (let i = 0; i < boxOptions.length; i++) {\n      const size = boxOptions[i].split(\",\")[2];\n\n      if (numbers.includes(size)) {\n        nums.push(size);\n      }\n    }\n\n    shuffle(nums);\n\n    const dp = Array.from({ length: length + 1 }, () => Array(number + 1).fill(null));\n\n    try {\n      dp[0][0] = [];\n    } catch (e) {\n      return [];\n    }\n\n    for (let i = 1; i <= length; i++) {\n      for (let j = 0; j <= number; j++) {\n        for (const num of nums) {\n          if (j - num >= 0 && dp[i - 1][j - num] !== null) {\n            if (dp[i][j] === null || dp[i][j].length < i) {\n              const nextSequence = dp[i - 1][j - num].concat([num]);\n              if (!hasRepetition(nextSequence) || i >= length * 0.8) {\n                dp[i][j] = nextSequence;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return dp[length][number] !== null ? dp[length][number] : [];\n  }\n\n  // Check if there are repetitions in the sequence\n  function hasRepetition(sequence) {\n    for (let i = 1; i < sequence.length; i++) {\n      if (sequence[i] === sequence[i - 1]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Helper function to shuffle an array\n  function shuffle(array) {\n    let currentIndex = array.length, randomIndex;\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n  }\n\n  function bentoIsFilledAppropriately(field, numBoxesSoFar, numBoxes) {\n    for (let row of field) {\n        for (let element of row) {\n            if (element === \"**\") {\n                return false;\n            }\n        }\n    }\n\n    console.log(\"Bento filled? \",numBoxesSoFar === numBoxes,numBoxesSoFar,numBoxes);\n\n    return numBoxesSoFar === numBoxes;\n  }\n\n  function storeForbiddenPath(forbiddenPathsDict, path, position, boxOption) {\n    if (forbiddenPathsDict[path]) {\n        if (!forbiddenPathsDict[path].includes(`${boxOption},${position}`)) {\n            forbiddenPathsDict[path].push(`${boxOption},${position}`);\n        }\n    } else {\n        forbiddenPathsDict[path] = [`${boxOption},${position}`];\n    }\n  }\n\n  function retrieveForbiddenPaths(forbiddenPathsDict, basePath) {\n      return forbiddenPathsDict[basePath] || [];\n  }\n\n  function getBoxOptionsFromSize(minSize, maxSize, size, width, height) {\n    const boxOptions = getBoxOptions(minSize, maxSize, width, height);\n    console.log(\"Box ops: \",boxOptions, \" size: \",size)\n    return boxOptions.filter(x => x.split(\",\")[2] === size);\n  }\n\n  function findCandidateIndices(field, boxOptionString) {\n    const boxOption = boxOptionString.split(\",\");\n    const boxWidth = parseInt(boxOption[0]);\n    const boxHeight = parseInt(boxOption[1]);\n\n    const indices = [];\n\n    const rows = field.length;\n    const cols = rows > 0 ? field[0].length : 0;\n\n    for (let i = 0; i < rows - boxHeight + 1; i++) {\n        for (let j = 0; j < cols - boxWidth + 1; j++) {\n            const subArr = field.slice(i, i + boxHeight).map(row => row.slice(j, j + boxWidth));\n            const isAllEmpty = subArr.every(row => row.every(elem => elem === \"**\"));\n            if (isAllEmpty) {\n                indices.push([i, j]);\n            }\n        }\n    }\n\n    return indices;\n  }\n\n  function augmentWithBox(field, index, boxOptionString, newChar) {\n    console.log(\"Augmentation time!!! \", index)\n    const fieldCopy = field.map(row => [...row]); // Deep copy of the field\n\n    const boxOption = boxOptionString.split(\",\")\n    const boxWidth = parseInt(boxOption[0]);\n    const boxHeight = parseInt(boxOption[1]);\n\n    const [x, y] = index;\n    for (let i = x; i < x + boxHeight; i++) {\n        for (let j = y; j < y + boxWidth; j++) {\n            console.log(\"Augmentation time!!!XXX\")\n            fieldCopy[i][j] = `*${newChar}`;\n        }\n    }\n\n    return fieldCopy;\n  }\n\n\n  // Handle generating a new field\n  const handleGenerateField = async () => {\n    await setProcessing(true);\n\n    let field = createField(width, height);\n\n    const boxOptions = getBoxOptions(minSize, maxSize, width, height);\n\n    const boxSizes = boxOptions.map((x) => x[2]);\n\n    let theSequence = findSequenceOfLengthBest(width * height, boxSizes, numBoxes, boxOptions);\n    theSequence.sort((a, b) => b - a);\n\n    setSequence(theSequence.toString());\n\n    let prevPrevState = _.cloneDeep(field);\n    let prevState = _.cloneDeep(field);\n\n    let prevPrevNumBoxes = 0;\n    let prevNumBoxes = 0;\n    const forbiddenPathsDict = {};\n    let runNumber = 0;\n\n    let numBoxesSoFar = 0\n    let currentPath = []\n\n    while (!bentoIsFilledAppropriately(field, numBoxesSoFar, numBoxes)) {\n      const relevantBoxSize = theSequence[numBoxesSoFar];\n      const relevantBoxOptions = getBoxOptionsFromSize(minSize, maxSize, relevantBoxSize, width, height);\n\n      let newBoxCanBeAdded = false;\n      let newBoxOption = null;\n      let newBoxIndex = null;\n\n      console.log(\"relevantBoxSize: \",relevantBoxSize);\n      console.log(\"relevantBoxOptions: \",relevantBoxOptions);\n\n      for (const boxOption of relevantBoxOptions) {\n          const candidateIndices = findCandidateIndices(field, boxOption);\n          console.log(\"candidateIndices: \",candidateIndices);\n          const validCandidateIndices = [];\n\n          for (const candidateIndex of candidateIndices) {\n              const pathStr = `${candidateIndex},${boxOption}`;\n              if (!retrieveForbiddenPaths(forbiddenPathsDict, String(currentPath)).includes(pathStr)) {\n                  console.log(\"ValidCandidate: \",candidateIndex,boxOption)\n                  validCandidateIndices.push(candidateIndex);\n              }\n          }\n\n          if (validCandidateIndices.length > 0) {\n              newBoxCanBeAdded = true;\n              newBoxOption = boxOption;\n              const randomIndex = Math.floor(Math.random() * validCandidateIndices.length)\n              console.log(\"randomIndex: \",randomIndex)\n              newBoxIndex = validCandidateIndices[randomIndex];\n              /*\n              if (validCandidateIndices.some(index => index[0] === 0 && index[1] === 0)) {\n                newBoxIndex = [0, 0];\n              } else {\n                newBoxIndex = validCandidateIndices[Math.floor(Math.random() * validCandidateIndices.length)];\n              }*/\n              break;\n          }\n      }\n\n      if (newBoxCanBeAdded) {\n          prevPrevNumBoxes = prevNumBoxes;\n          prevPrevState = _.cloneDeep(prevState);\n          prevNumBoxes = numBoxesSoFar;\n          prevState = _.cloneDeep(field);\n          const augmentedField = augmentWithBox(field, newBoxIndex, newBoxOption, numBoxesSoFar);\n          field = _.cloneDeep(augmentedField);\n          numBoxesSoFar++;\n\n          currentPath.push([newBoxOption, newBoxIndex]);\n      } else {\n          if (currentPath.length === 0) {\n              field = createField(width, height);\n\n              prevPrevNumBoxes = 0;\n              prevPrevState = _.cloneDeep(field);\n\n              prevNumBoxes = 0;\n              prevState = _.cloneDeep(field);\n\n              numBoxesSoFar = 0;\n          } else {\n              const [lastBoxPosition, lastBoxOption] = currentPath.pop();\n\n              storeForbiddenPath(forbiddenPathsDict, String(currentPath), lastBoxPosition, lastBoxOption);\n\n              if (currentPath.length === 0) {\n                  field = createField(width, height);\n\n                  prevPrevNumBoxes = 0;\n                  prevPrevState = _.cloneDeep(field);\n\n                  prevNumBoxes = 0;\n                  prevState = _.cloneDeep(field);\n\n                  numBoxesSoFar = 0;\n              } else {\n                  numBoxesSoFar = prevNumBoxes;\n                  field = _.cloneDeep(prevState);\n\n                  prevNumBoxes = prevPrevNumBoxes;\n                  prevState = _.cloneDeep(prevPrevState);\n              }\n          }\n      }\n\n      runNumber++;\n\n      if (runNumber % 1 === 0) {\n          console.log(runNumber, numBoxesSoFar);\n          console.log(\"path: \",currentPath);\n          console.log(\"numBoxesSoFar: \",numBoxesSoFar)\n      }\n\n      if (runNumber % 10 === 0) {\n          visualizeField(field, width, height).then((visualized) => setField(visualized));\n      }\n\n      if (runNumber % 1000 === 0) {\n          break;\n      }\n\n\n      if (prevNumBoxes === prevPrevNumBoxes && prevNumBoxes === numBoxesSoFar) {\n          theSequence = findSequenceOfLengthBest(width * height, boxOptions.map(x => x[2]), numBoxes, boxOptions);\n          theSequence.sort((a, b) => b - a);\n\n          setSequence(theSequence.toString())\n\n          field = createField(width, height);\n\n          prevPrevNumBoxes = 0;\n          prevPrevState = _.cloneDeep(field);\n\n          prevNumBoxes = 0;\n          prevState = _.cloneDeep(field);\n\n          numBoxesSoFar = 0;\n          currentPath = [];\n      }\n    }\n\n    visualizeField(field, width, height).then((visualized) => setField(visualized));\n    setProcessing(false)\n  };\n\n\n\n  return (\n    <div className=\"app\">\n\n      <div className=\"heading\">\n        <h3> 弁当屋 🍱 </h3> \n      </div>\n\n      <div className=\"inputs\">\n        {/* Four Number Input Fields */}\n        <div>\n          <label htmlFor=\"width\">Width:</label>\n          <br />\n          <input type=\"number\" id=\"width\" placeholder={width} value={width} onChange={handleWidthChange} min=\"2\" />\n        </div>\n        <div>\n          <label htmlFor=\"height\">Height:</label>\n          <br />\n          <input type=\"number\" id=\"height\" placeholder={height} value={height} onChange={handleHeightChange} min=\"2\"/>\n        </div>\n        <div>\n          <label htmlFor=\"input3\">Num Boxes:</label>\n          <br />\n          <input type=\"number\" id=\"input3\" placeholder={numBoxes} value={numBoxes} onChange={handleNumBoxesChange} min=\"1\"/>\n        </div>\n        <div>\n          <label htmlFor=\"input4\">Min Size:</label>\n          <br />\n          <input type=\"number\" id=\"input4\" placeholder={minSize} value={minSize} onChange={handleMinSizeChange} min=\"1\"/>\n        </div>\n        <div>\n          <label htmlFor=\"input5\">Max Size:</label>\n          <br />\n          <input type=\"number\" id=\"input5\" placeholder={maxSize} value={maxSize} onChange={handleMaxSizeChange} min=\"1\"/>\n        </div>\n\n        <button onClick={handleGenerateField}> Generate </button>\n      </div>\n\n      <div className=\"bentoArea\">\n        {(processing ? \"Please wait...\" : \"\")}\n        <br/>\n        {(sequence.length > 0 ? sequence : \"Invalid num of boxes\")}\n        <br/>\n        <br/>\n        <br/>\n        {field}\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}